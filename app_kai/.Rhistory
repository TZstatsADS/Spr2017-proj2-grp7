#
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa')
# )
#
#
#
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')
# # restrict from June to September
# df <- subset(df, Month %in% 6:9)
# # ordered factor variable with month abbreviations
# df$abbrev <- ordered(month.abb[df$Month], levels = month.abb[6:9])
# # September totals
# df9 <- subset(df, Month == 9)
# # common plot options
# g <- list(
#   scope = 'africa',
#   showframe = F,
#   showland = T,
#   landcolor = toRGB("grey90")
# )
#
# g1 <- c(
#   g,
#   resolution = 50,
#   showcoastlines = T,
#   countrycolor = toRGB("white"),
#   coastlinecolor = toRGB("white"),
#   projection = list(type = 'Mercator'),
#   list(lonaxis = list(range = c(-15, -5))),
#   list(lataxis = list(range = c(0, 12))),
#   list(domain = list(x = c(0, 1), y = c(0, 1)))
# )
#
# g2 <- c(
#   g,
#   showcountries = F,
#   bgcolor = toRGB("white", alpha = 0),
#   list(domain = list(x = c(0, .6), y = c(0, .6)))
# )
#
# zipcode <- read.csv("../data/zip_codes_states.csv")
# new_df <- melt(df_fuel_state_int)
# new_zipcode$Lat <- tapply(new_df)
#
# p <- new_df %>%
#   plot_geo(
#     locationmode = 'USA-states', sizes = c(1, 1000), color = I("black")
#   ) %>%
#   layout(
#     title = 'Ebola cases reported by month in West Africa 2014<br> Source: <a href="https://data.hdx.rwlabs.org/dataset/rowca-ebola-cases">HDX</a>',
#     geo = g
#   ) %>%
#
#     add_markers(
#     y = ~Lat, x = ~Lon, locations = ~state,
#     size = ~ value, color = ~ variable, text = ~paste(Value, "cases")
#   ) %>%
#   add_trace(
#     data = df_fuel_state_int[,1:7], z = ~df_fuel_state_int[,1:7], locations = ~state,
#     showscale = F, geo = g
#   ) %>%
#   p
#
#
#
#  data.frame(table_grow_afs[,"1971",])
#
#
# data(gapminder, package = "gapminder")
# gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
#   geom_point(aes(size = pop, frame = year)) +
#   scale_x_log10()
# ggplotly(gg)
#
# find_info <- function(year, state){
#     Fuel.Type <- names(which.max(table_grow_afs[,as.character(year:(year+3))), state]))
#     Sum.Year <- sum(table_grow_afs[,as.character(year), state])
#     return(c(year, state, Fuel.Type, Sum.Year))
# }
# ma <- t(mapply(find_info,rep(seq(1970,2014,4), each=51),rep(states_total,time = 12)))
# ani_df <- data.frame(Year = as.numeric(ma[,1]), State  = factor(ma[,2]),
#                      Fuel = factor(ma[,3]), Total = as.numeric(ma[,4]),
#                      stringsAsFactors = FALSE)
# ani_df
#
# #
#
# df_fake <- data.frame(Year = 1995:2015,
#                       Prop = runif(21)*40,
#                       Vehicle = rnorm(21,10000,2000),
#                       Station = rnorm(21,10000,2000),
#                       Col = c(rep(c("Green","Red"),10),"Red")
#                       )
#
#
# p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
#                type = 'scatter', mode = 'markers', frame = ~Year,
#              marker = list(size = ~Prop, opacity = 0.5,
#                            color = ~Col)) %>%
#   layout(title = 'Gender Gap in Earnings per University',
#          xaxis = list(showgrid = T),
#          yaxis = list(showgrid = T)) %>%
#   animation_opts(1000, easing = "elastic") %>%
#   animation_button(
#     x = 1, xanchor = "right", y = 0, yanchor = "bottom"
#   ) %>%
#   animation_slider(
#     currentvalue = list(prefix = "Year ", font = list(color="red"))
#   )
# p33
#
# #
# # base <- df_fake %>%
# #   plot_ly(x = ~Station, y = ~Vehicle, size = ~(Prop),
# #           hoverinfo = "text", trace = Year) %>%
# #   layout() %>%
# #   add_markers(color = ~Fuel, frame = ~Year, ids = ~State) %>%
# #   animation_opts(1000, easing = "elastic") %>%
#   animation_button(
#     x = 1, xanchor = "right", y = 0, yanchor = "bottom"
#   ) %>%
#   animation_slider(
#     currentvalue = list(prefix = "Year ", font = list(color="red"))
#   )
#
#
# base
# find_info(2016,"CA")
runApp()
range_year_v<-c(1970,2000)
selected_years <- (years_total>= range_year_v[1]) & (years_total <= range_year_v[2])
selected_years_v <- years_total[selected_years]
### trend part
table_fuel_year_int <- table_fuel_year[selected_years,]
df_fuel_year_int <- data.frame(table_fuel_year_int)
rownames(df_fuel_year_int) <- selected_years_v
df_fuel_year_int$Year <- factor(selected_years_v)
### comparison part
table_fuel_state_int <- apply(table_grow_afs[, selected_years, ], c(3,1), sum)
df_fuel_state_int <- data.frame(table_fuel_state_int)
df_fuel_state_int$SUM <- rowSums(df_fuel_state_int)
df_fuel_state_int$state <- rownames(df_fuel_state_int)
df_fuel_state_int$state2 <- states_full
### Choose a column to compare
if (input$fuel_type1 == "ALL")
df_fuel_state_int$tempt <- df_fuel_state_int[,8]
else
df_fuel_state_int$tempt <- df_fuel_state_int[,input$fuel_type1 == colnames(df_fuel_state_int)]
df_fuel_state_int <- df_fuel_state_int[order(df_fuel_state_int$state2),]
if (input$index_scale == "By Population")
df_fuel_state_int$tempt <- df_fuel_state_int$tempt / df_pop_state$value
state_rank <- order(df_fuel_state_int$tempt, decreasing = T)
list(YEAR = selected_years_v,
DATA_trend1 = df_fuel_year_int,
DATA_statecompare = df_fuel_state_int,
DATA_ranking = df_fuel_state_int[state_rank,]
list(YEAR = selected_years_v,
DATA_trend1 = df_fuel_year_int,
DATA_statecompare = df_fuel_state_int,
DATA_ranking = df_fuel_state_int[state_rank,]
)
selected_years <- (years_total>= range_year_v[1]) & (years_total <= range_year_v[2])
selected_years_v <- years_total[selected_years]
### trend part
table_fuel_year_int <- table_fuel_year[selected_years,]
df_fuel_year_int <- data.frame(table_fuel_year_int)
rownames(df_fuel_year_int) <- selected_years_v
df_fuel_year_int$Year <- factor(selected_years_v)
### comparison part
table_fuel_state_int <- apply(table_grow_afs[, selected_years, ], c(3,1), sum)
df_fuel_state_int <- data.frame(table_fuel_state_int)
df_fuel_state_int$SUM <- rowSums(df_fuel_state_int)
df_fuel_state_int$state <- rownames(df_fuel_state_int)
df_fuel_state_int$state2 <- states_full
### Choose a column to compare
if (input$fuel_type1 == "ALL")
df_fuel_state_int$tempt <- df_fuel_state_int[,8]
else
df_fuel_state_int$tempt <- df_fuel_state_int[,input$fuel_type1 == colnames(df_fuel_state_int)]
df_fuel_state_int <- df_fuel_state_int[order(df_fuel_state_int$state2),]
selected_years <- (years_total>= range_year_v[1]) & (years_total <= range_year_v[2])
selected_years_v <- years_total[selected_years]
table_fuel_year_int <- table_fuel_year[selected_years,]
df_fuel_year_int <- data.frame(table_fuel_year_int)
rownames(df_fuel_year_int) <- selected_years_v
df_fuel_year_int$Year <- factor(selected_years_v)
### comparison part
table_fuel_state_int <- apply(table_grow_afs[, selected_years, ], c(3,1), sum)
df_fuel_state_int <- data.frame(table_fuel_state_int)
df_fuel_state_int$SUM <- rowSums(df_fuel_state_int)
df_fuel_state_int$state <- rownames(df_fuel_state_int)
df_fuel_state_int$state2 <- states_full
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations") %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
DATA_statecompare = df_fuel_state_int
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations") %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
df_fuel_state_int$tempt <- df_fuel_state_int[,8]
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations") %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
df_fuel_state_int$tempt <- df_fuel_state_int[,8]
DATA_statecompare = df_fuel_state_int
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations") %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
runApp()
runApp()
?colorbar
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations",
limits = c(0,5)) %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations",
limits = c(1,3000)) %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations",
limits = c(1,max(tempt))) %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations",
limits = c(1,max(~tempt))) %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations",
limits = c(1,100)) %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
?colorbar
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations",
len = 1),
limits = c(1,100)) %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Blues', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations",
len = 1,
limits = c(1,100)) %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
?colors
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'BuGn', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations",
len = 1,
limits = c(1,100)) %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'BuGn', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations",
len = 1,
limits = c(1,50)) %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
DATA_statecompare %>%
plot_geo(locationmode = 'USA-states',
hoverinfo = "location+text") %>%
### ALL
add_trace(
z = ~tempt, text = ~paste(state2,':<br>',tempt), locations = ~state,
color = ~tempt, colors = 'Oranges', visible = T,
showscale = T
) %>%
colorbar(title = "# Stations",
len = 1,
limits = c(1,50)) %>%
layout(
title = 'Fuel Stations Distribution(Accumulative)',
geo = g
)
max(df_fuel_state_int$tempt)
color <- apply(table_grow_afs, c(3,1), sum)
color
color_max <- apply(table_grow_afs, c(3,1), sum)
df_fuel_state_int$tempt <- df_fuel_state_int[,input$fuel_type1 == colnames(df_fuel_state_int)]
df_fuel_state_int <- df_fuel_state_int[order(df_fuel_state_int$state2),]
runApp()
range_year_v
color_max <- apply(table_grow_afs, c(3,1), sum)
color_max
color_max <- max(color_max[,8])
runApp()
color_max <- apply(table_grow_afs, c(3,1), sum)
color_max$SUM <- rowSums(color_max)
color_max <- apply(table_grow_afs, c(3,1), sum)
color_max$SUM <- rowSums(color_max)
str(color_max)
color_max <- apply(table_grow_afs, c(3,1), sum)
color_max
color_max$SUM <- rowSums(dataframe(color_max))
color_max$SUM <- rowSums(data.frame(color_max))
color_max <- apply(table_grow_afs, c(3,1), sum)
data.frame(color_max)
rowSums(data.frame(color_max))
color_max$SUM <- rowSums(data.frame(color_max))
color_max$SUM <- rowSums(data.frame(color_max))
color_max <- apply(table_grow_afs, c(3,1), sum)
color_max$SUM <- rowSums(data.frame(color_max))
color_max <- data.frame(apply(table_grow_afs, c(3,1), sum))
color_max$SUM <- rowSums(color_max)
runApp()
runApp()
?colors
runApp()
runApp()
kaicolorset <- c("Reds","BuGn","PuBu","PuBuGn", "PuRd", "Purples", "YlGn ")
runApp()
which(input$fuel_type1 == colnames(df_fuel_state_int)
)
colnames(df_fuel_state_int)
runApp()
runApp()
color_max
color_max <- max(color_max[,selected_set])
colorset <- "Oranges"
COLORMAX[2]
COLORMAX = c(color_max,colorset)
COLORMAX
COLORMAX[2]
runApp()
runApp()
runApp()
kaicolorset <- c("Reds","BuGn","PuBu","PuBuGn", "PuRd", "Purples", "YlGn ")
kaicolorset[3]
runApp()
runApp()
runApp()
runApp()
runApp()
?colorbar()
runApp()
kaicolorset <- c("Reds","YlOrBr","PuBu","YlOrRd", "PuRd", "Purples", "YlGn")
runApp()
?sliderInput
sliderInput("animationslider", "Let's start an animation: ",
min=1971, max=2018, value = c(1971), 1,
dragRange = T,
animate = animationOptions(interval = 300,
loop = F,
playButton = "a")
)
sliderInput("animationslider", "Let's start an animation: ",
min=1971, max=2018, value = c(1971), 1,
dragRange = T,
animate = animationOptions(interval = 300,
loop = F,
playButton = "a"))
runApp()
runApp()
?animationOptions
runApp()
runApp()
runApp()
?icon
runApp()
runApp()
?playButton
?animationOptions
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
