<<<<<<< HEAD
=======
<<<<<<< Updated upstream
# }
# ma <- t(mapply(find_info,rep(seq(1970,2014,4), each=51),rep(states_total,time = 12)))
# ani_df <- data.frame(Year = as.numeric(ma[,1]), State  = factor(ma[,2]),
#                      Fuel = factor(ma[,3]), Total = as.numeric(ma[,4]),
#                      stringsAsFactors = FALSE)
# ani_df
#
# #
>>>>>>> origin/master
kaicolorset2 <- c("red","blue","orange","brown","black","green")
# p33 <- plot_ly(vehicle_df_final, x = ~Fuel, y = ~Vehicle,text = ~Type,
#                type = 'scatter', mode = 'markers', frame = ~Year,
#              marker = list(size = ~30*(Prop*100)^(1/10), opacity = 0.5,
#                            color = kaicolorset2[vehicle_df_final$Type])) %>%
#   layout(title = 'Gender Gap in Earnings per University',
#          xaxis = list(showgrid = T),
#          yaxis = list(showgrid = T, type="log")) %>%
#   animation_opts(1000, easing = "elastic") %>%
#   animation_button(
#     x = 1, xanchor = "right", y = 0, yanchor = "top"
#   ) %>%
#   animation_slider(
#     currentvalue = list(prefix = "Year ", font = list(color="red"))
#   )
# p33
vehicle_df_final2 <- vehicle_df_final[order(vehicle_df_final$Type),]
rownames(vehicle_df_final2) <- 1:53
vehicle_df_final2 <- rbind(vehicle_df_final2[c(1,12,17,28,32,43),],
vehicle_df_final2)
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Type),]
vehicle_df_final2$Speed <- c(1,(vehicle_df_final2$Vehicle[2:59]-vehicle_df_final2$Vehicle[1:58]) / vehicle_df_final2$Vehicle[1:58])
rownames(vehicle_df_final2) <- 1:59
vehicle_df_final2 <- vehicle_df_final2[-c(1,13,19,31,36,48),]
makeupdata <- matrix(data = c(2004, "E85", 0,0,0,0,0,
2004, "HY",0,0,0,0,0,
2005, "E85", 0,0,0,0,0,
2005, "HY",0,0,0,0,0,
2006, "E85", 0,0,0,0,0,
2006, "HY",0,0,0,0,0,
2007, "E85", 0,0,0,0,0,
2007, "HY",0,0,0,0,0,
2008, "E85", 0,0,0,0,0,
2008, "HY",0,0,0,0,0,
2009, "E85", 0,0,0,0,0,
2009, "HY",0,0,0,0,0,
2010, "HY",0,0,0,0,0), ncol = 7, byrow = T)
makeupdata <- data.frame(makeupdata)
colnames(makeupdata) <- c("Year","Type","Vehicle","Fuel","Prop","Speed","add_fuel")
vehicle_df_final2 <- rbind(vehicle_df_final2, makeupdata)
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Type),]
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Year),]
vehicle_df_final2$Year <- as.numeric(vehicle_df_final2$Year)
vehicle_df_final2$Vehicle <- as.numeric(vehicle_df_final2$Vehicle)
vehicle_df_final2$Fuel <- as.numeric(vehicle_df_final2$Fuel)
vehicle_df_final2$Speed <- as.numeric(vehicle_df_final2$Speed)
vehicle_df_final2$Prop <- as.numeric(vehicle_df_final2$Prop)
vehicle_df_final2$Type <- factor(vehicle_df_final2$Type)
vehicle_df_final2$add_fuel <- as.numeric(vehicle_df_final2$add_fuel)
### 21 rep.int(year_total, num_year)
initial_vehicles2 <- rep(c(41711,254077,2227,33,1166,26978),  11)
vehicle_df_final2$Vehicle_scale <- vehicle_df_final2$Vehicle / initial_vehicles2
###
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/2) * 50, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Vehicles',
xaxis = list(title = 'Fuel Stations Accumulation',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5300),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
range = c(0, 4),
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
rownames(vehicle_df_final2) <- 1:nrow(vehicle_df_final2)
fuel_vehicle_add3 <- fuel_vehicle_add[-c(1,2,3,4,27,33)]
regular <- which(vehicle_df_final2$Speed ==0)
regular <- regular[1:(length(regular)-1)]
vehicle_df_final3 <- vehicle_df_final2[-regular,]
reg_df <- data.frame(add_station = fuel_vehicle_add3,
rate_increasing = vehicle_df_final3$Speed,
Type = vehicle_df_final3$Type,
Year = vehicle_df_final3$Year)
reg_df <- reg_df[order(reg_df$rate_increasing),]
p35 <- reg_df %>%
plot_ly(x = ~rate_increasing, y = ~add_station, color = ~Type,
text = ~paste(Year)) %>%
layout(
xaxis = list(title = 'Rate of increasing vehicles',
gridcolor = 'rgb(255, 255, 255)',
range = c(-0.5,0.5),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Stations added in one year(log)',
gridcolor = 'rgb(255, 255, 255)',
type = "log",
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2)
)
# p35
# Years_available <- unique(vehicle_df_final3$Year[selected_rows])
# REG_FUEL_ADD <- as.numeric(table_fuel_year[as.character(Years_available),input$fuel_type_reg])
# REG_VEH_NUM <- vehicle_df_final3$Speed[selected_rows]
#
#
# p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# p
#
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)%>%
layout(
xaxis = list(title = 'Number of Stations',
#  gridcolor = 'grey',
=======
<<<<<<< HEAD
)
p33
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000),
Col = rep(c("Green","Red"),10)
)
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000),
Col = c(rep(c("Green","Red"),10),"Red")
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = Col)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000),
Col = c(rep(c("Green","Red"),10),"Red")
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = Col)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = ~Col)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33
shiny::runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
# load packages
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
library(plotly)
library(tibble)
source("../lib/Kai_code.R")
setwd("~/Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai")
path_alt_fuel_station <- "../data/alt_fuel_stations (Feb 12 2017).csv"
alt_fuel_station <- read.csv(path_alt_fuel_station,
stringsAsFactors = F,
header = T)
nrow(alt_fuel_station)
grow_afs <-
tbl_df(alt_fuel_station)  %>%
select(Fuel.Type.Code, Expected.Date, Open.Date, State) %>%
filter((nchar(Expected.Date)!=0)|(nchar(Open.Date)!=0))  %>%
mutate(Start.Date = as.Date(ifelse(nchar(Expected.Date)!=0,
Expected.Date,
Open.Date))) %>%
mutate(Start.Year = format(Start.Date, '%Y')) %>%
mutate(Start.Month = format(Start.Date, '%m')) %>%
select(Fuel.Type.Code, Start.Year, State)
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
source("fakedata.R")
z <- c(1,1,1)
n =10
Sdata <- fakedata(z,n)
classify <- function(S,z){
result <- ifelse(S %*% z> 0 , 1, -1)
return(result)
}
classify(Sdata$S,z)
Cost_function <- function(S,y,z){
sum((classify(S,z) != y) * abs(S %*% z))
}
Cost_dev_function <- function(S,y,z){
colSums(as.numeric(classify(S,z) != y) * (-y) * S)
}
perceptrain <- function(S,y){
z <- c(runif(ncol(S)-1),1)
z <- c(1,-1,1)
Z_history <- z
dc <- Cost_dev_function(S,y,z)
k <- 1
while(Cost_function(S,y,z) != 0){
dc <- Cost_dev_function(S,y,z)
z <- z - (1/k) * dc
Z_history <- rbind(Z_history, z)
k <- k + 1
}
return(list(z=z, Z_history = Z_history))
}
#  perceptrain(Sdata$S,Sdata$y)
z <- rnorm(3)
Sdata2 <- fakedata(z,100)
z_train <- perceptrain(Sdata2$S, Sdata2$y)
Sdata3 <- fakedata(z,100)
correct_rate <- sum(classify(Sdata3$S,z_train$z) == Sdata3$y) /100
correct_rate
#  z_train
test_data <- Sdata3$S[,1:2]
plot(test_data, col = factor(Sdata3$y), main = "Test Data",
xlab = "", ylab = "")
slope <- - z_train$z[1] / z_train$z[2]
intercept <- - z_train$z[3] / z_train$z[2]
abline(intercept, slope)
z_train
slope.t <- - z_train$Z_history[,1] / z_train$Z_history[,2]
intercept.t <- - z_train$Z_history[3] / z_train$Z_history[2]
intercept.t
slope.t <- - z_train$Z_history[,1] / z_train$Z_history[,2]
intercept.t <- - z_train$Z_history[,3] / z_train$Z_history[,2]
slope.t
train_data <- Sdata2$S[,1:2]
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept.t,slope.t)
abline(intercept.t[1],slope.t[1])
intercept.t
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
abline(intercept.t[1],slope.t[1])
intercept.t[1]
slope.t[1]
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
abline(intercept.t[1],slope.t[1])
train_data <- Sdata2$S[,1:2]
z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
abline(intercept.t[1],slope.t[1])
train_data <- Sdata2$S[,1:2]
z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
abline(intercept.t,slope.t)
abline(intercept[2].t,slope.t[2])
abline(intercept[2].t,slope.t[2])
abline(intercept[2].t,slope.t[2])
abline(intercept.t[2],slope.t[2])
plot(1,1)
abline(c(1,2),c(1,1))
plot(-1:1,-1:1)
abline(c(1,2),c(1,1))
abline(c(2,1),c(1,1))
train_data <- Sdata2$S[,1:2]
z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope, "green")
for (i in 1:(length(z_train$z)-1)) {abline(intercept.t[i],slope.t[i])}
train_data <- Sdata2$S[,1:2]
#z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope, "green")
for (i in 1:(length(z_train$z)-1)) {abline(intercept.t[i],slope.t[i])}
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
slope.t
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
intercept.t
(length(z_train$z)-1)
z_train$z
(nrow(z_train$Z_history)-1)
=======
base <- df_fake %>%
plot_ly(x = ~Station, y = ~Vehicle, size = ~(Prop),
hoverinfo = "text", trace = Year) %>%
layout() %>%
add_markers(color = ~Fuel, frame = ~Year, ids = ~State) %>%
=======
# }
# ma <- t(mapply(find_info,rep(seq(1970,2014,4), each=51),rep(states_total,time = 12)))
# ani_df <- data.frame(Year = as.numeric(ma[,1]), State  = factor(ma[,2]),
#                      Fuel = factor(ma[,3]), Total = as.numeric(ma[,4]),
#                      stringsAsFactors = FALSE)
# ani_df
#
# #
kaicolorset2 <- c("red","blue","orange","brown","black","green")
# p33 <- plot_ly(vehicle_df_final, x = ~Fuel, y = ~Vehicle,text = ~Type,
#                type = 'scatter', mode = 'markers', frame = ~Year,
#              marker = list(size = ~30*(Prop*100)^(1/10), opacity = 0.5,
#                            color = kaicolorset2[vehicle_df_final$Type])) %>%
#   layout(title = 'Gender Gap in Earnings per University',
#          xaxis = list(showgrid = T),
#          yaxis = list(showgrid = T, type="log")) %>%
#   animation_opts(1000, easing = "elastic") %>%
#   animation_button(
#     x = 1, xanchor = "right", y = 0, yanchor = "top"
#   ) %>%
#   animation_slider(
#     currentvalue = list(prefix = "Year ", font = list(color="red"))
#   )
# p33
vehicle_df_final2 <- vehicle_df_final[order(vehicle_df_final$Type),]
rownames(vehicle_df_final2) <- 1:53
vehicle_df_final2 <- rbind(vehicle_df_final2[c(1,12,17,28,32,43),],
vehicle_df_final2)
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Type),]
vehicle_df_final2$Speed <- c(1,(vehicle_df_final2$Vehicle[2:59]-vehicle_df_final2$Vehicle[1:58]) / vehicle_df_final2$Vehicle[1:58])
rownames(vehicle_df_final2) <- 1:59
vehicle_df_final2 <- vehicle_df_final2[-c(1,13,19,31,36,48),]
makeupdata <- matrix(data = c(2004, "E85", 0,0,0,0,0,
2004, "HY",0,0,0,0,0,
2005, "E85", 0,0,0,0,0,
2005, "HY",0,0,0,0,0,
2006, "E85", 0,0,0,0,0,
2006, "HY",0,0,0,0,0,
2007, "E85", 0,0,0,0,0,
2007, "HY",0,0,0,0,0,
2008, "E85", 0,0,0,0,0,
2008, "HY",0,0,0,0,0,
2009, "E85", 0,0,0,0,0,
2009, "HY",0,0,0,0,0,
2010, "HY",0,0,0,0,0), ncol = 7, byrow = T)
makeupdata <- data.frame(makeupdata)
colnames(makeupdata) <- c("Year","Type","Vehicle","Fuel","Prop","Speed","add_fuel")
vehicle_df_final2 <- rbind(vehicle_df_final2, makeupdata)
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Type),]
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Year),]
vehicle_df_final2$Year <- as.numeric(vehicle_df_final2$Year)
vehicle_df_final2$Vehicle <- as.numeric(vehicle_df_final2$Vehicle)
vehicle_df_final2$Fuel <- as.numeric(vehicle_df_final2$Fuel)
vehicle_df_final2$Speed <- as.numeric(vehicle_df_final2$Speed)
vehicle_df_final2$Prop <- as.numeric(vehicle_df_final2$Prop)
vehicle_df_final2$Type <- factor(vehicle_df_final2$Type)
vehicle_df_final2$add_fuel <- as.numeric(vehicle_df_final2$add_fuel)
### 21 rep.int(year_total, num_year)
initial_vehicles2 <- rep(c(41711,254077,2227,33,1166,26978),  11)
vehicle_df_final2$Vehicle_scale <- vehicle_df_final2$Vehicle / initial_vehicles2
###
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/2) * 50, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Vehicles',
xaxis = list(title = 'Fuel Stations Accumulation',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5300),
>>>>>>> Stashed changes
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1),
yaxis = list(title = 'Vehicles',
#  gridcolor = 'grey',
zerolinewidth = 1,
<<<<<<< Updated upstream
=======
range = c(0, 4),
>>>>>>> Stashed changes
ticklen = 5,
gridwidth = 1)
)
<<<<<<< Updated upstream
p36
p35
runApp()
runApp()
shiny::runApp()
path_alt_fuel_station <- "../data/alt_fuel_stations (Feb 12 2017).csv"
alt_fuel_station <- read.csv(path_alt_fuel_station,
stringsAsFactors = F,
header = T)
nrow(alt_fuel_station)
### Remove stations with no record on either open date or expected open date
### Then Create a new variable to give the date of opening
# grow_afs <- tbl_df(alt_fuel_station)
# grow_afs$Expected.Date
grow_afs <-
tbl_df(alt_fuel_station)  %>%
select(Fuel.Type.Code, Expected.Date, Open.Date, State) %>%
filter((nchar(Expected.Date)!=0)|(nchar(Open.Date)!=0))  %>%
mutate(Start.Date = as.Date(ifelse(nchar(Expected.Date)!=0,
Expected.Date,
Open.Date))) %>%
mutate(Start.Year = format(Start.Date, '%Y')) %>%
mutate(Start.Month = format(Start.Date, '%m')) %>%
select(Fuel.Type.Code, Start.Year, State)
table_grow_afs <- table(grow_afs)
## generate a table, with (x=year, y=fuel)
table_fuel_year <- apply(table_grow_afs, c(2,1), sum)
years_total <- as.numeric(rownames(table_fuel_year))
states_full <- dimnames(table_grow_afs)$State
states_total <- dimnames(table_grow_afs)$State
#table_fuel_state <- apply(table_grow_afs, c(3,1), sum)
### A dataset which can help to transform our states' names
df_name_state <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv",
stringsAsFactors = F)
ABBR = df_name_state$code
FULL = df_name_state$state
for (i in 1:50){
states_full <- replace(states_full,  states_full== ABBR[i], FULL[i])
}
# sort(FULL)
# grow_afs <- grow_afs[grow_afs$State!="DC",]
#
#
# grow_state_condition <- data.frame(state = sort(unique(grow_afs$State)),
#                                    stringsAsFactors = F)
# grow_state_condition$state2 <- grow_state_condition$state
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
data(df_pop_state)
df_pop_state$region[9] <- "DC"
df_pop_state <- df_pop_state[order(df_pop_state$region),]
rownames(df_pop_state) <- 1:51
###
kaicolorset <- c("Reds","YlOrBr","YlGn","PuBu", "PuRd", "Purples", "Oranges")
#
folder_path_kai <- "../data/vehicle_station/"
temp <- list.files(path = folder_path_kai, pattern = "*.csv")
temp <- paste(folder_path_kai, temp, sep = "")
vehicle_list <- lapply(temp, read.csv, header = T, stringsAsFactors = F)
vehicle_length <- sapply(vehicle_list, nrow)
vehicle_total <-
rbind(vehicle_list[[1]],vehicle_list[[2]],
vehicle_list[[3]],vehicle_list[[4]],
vehicle_list[[5]],vehicle_list[[6]])
vehicle_df <- ddply(vehicle_total, .(Year, Fuel.Type), function(df){
return(sum(df$Number.of.Vehicles))
})
vehicle_df
name_fuel_vehicle <- substr(vehicle_df$Fuel,
nchar(vehicle_df$Fuel)-3,
nchar(vehicle_df$Fuel)-1)
name_fuel_vehicle <- replace(name_fuel_vehicle, name_fuel_vehicle=="EVC", "ELEC")
name_fuel_vehicle <- replace(name_fuel_vehicle, name_fuel_vehicle=="HYD", "HY")
year_vehicle <- as.character(vehicle_df$Year)
fuel_vehicle <- mapply(function(Year, type){
selected_years <- as.numeric(rownames(table_fuel_year)) <= as.numeric(Year)
fuel_number <- sum(table_fuel_year[selected_years,type])
return(fuel_number)
},
year_vehicle,
as.vector(name_fuel_vehicle))
fuel_vehicle_add <- mapply(function(Year, type){
selected_years <- as.numeric(rownames(table_fuel_year)) == as.numeric(Year)
fuel_number <- (table_fuel_year[selected_years,type])
return(fuel_number)
},
year_vehicle,
as.vector(name_fuel_vehicle))
year_total <- as.numeric(tapply(fuel_vehicle, names(fuel_vehicle), sum))
num_year <- as.numeric(table(names(fuel_vehicle)))
fenmu <- rep.int(year_total, num_year)
prop <- fuel_vehicle / fenmu
vehicle_df$Fuel <- fuel_vehicle
vehicle_df$Type <- name_fuel_vehicle
vehicle_df_final <- data.frame(Year = vehicle_df$Year,
Type = vehicle_df$Type,
Vehicle = vehicle_df$V1,
Fuel = vehicle_df$Fuel,
Prop =  prop,
add_fuel = fuel_vehicle_add
)
=======
p34
rownames(vehicle_df_final2) <- 1:nrow(vehicle_df_final2)
fuel_vehicle_add3 <- fuel_vehicle_add[-c(1,2,3,4,27,33)]
regular <- which(vehicle_df_final2$Speed ==0)
regular <- regular[1:(length(regular)-1)]
vehicle_df_final3 <- vehicle_df_final2[-regular,]
reg_df <- data.frame(add_station = fuel_vehicle_add3,
rate_increasing = vehicle_df_final3$Speed,
Type = vehicle_df_final3$Type,
Year = vehicle_df_final3$Year)
reg_df <- reg_df[order(reg_df$rate_increasing),]
p35 <- reg_df %>%
plot_ly(x = ~rate_increasing, y = ~add_station, color = ~Type,
text = ~paste(Year)) %>%
layout(
xaxis = list(title = 'Rate of increasing vehicles',
gridcolor = 'rgb(255, 255, 255)',
range = c(-0.5,0.5),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Stations added in one year(log)',
gridcolor = 'rgb(255, 255, 255)',
type = "log",
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2)
)
# p35
# Years_available <- unique(vehicle_df_final3$Year[selected_rows])
# REG_FUEL_ADD <- as.numeric(table_fuel_year[as.character(Years_available),input$fuel_type_reg])
# REG_VEH_NUM <- vehicle_df_final3$Speed[selected_rows]
#
#
# p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# p
#
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)%>%
layout(
xaxis = list(title = 'Number of Stations',
#  gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1),
yaxis = list(title = 'Vehicles',
#  gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1)
)
p36
p35
runApp()
runApp()
shiny::runApp()
path_alt_fuel_station <- "../data/alt_fuel_stations (Feb 12 2017).csv"
alt_fuel_station <- read.csv(path_alt_fuel_station,
stringsAsFactors = F,
header = T)
nrow(alt_fuel_station)
### Remove stations with no record on either open date or expected open date
### Then Create a new variable to give the date of opening
# grow_afs <- tbl_df(alt_fuel_station)
# grow_afs$Expected.Date
grow_afs <-
tbl_df(alt_fuel_station)  %>%
select(Fuel.Type.Code, Expected.Date, Open.Date, State) %>%
filter((nchar(Expected.Date)!=0)|(nchar(Open.Date)!=0))  %>%
mutate(Start.Date = as.Date(ifelse(nchar(Expected.Date)!=0,
Expected.Date,
Open.Date))) %>%
mutate(Start.Year = format(Start.Date, '%Y')) %>%
mutate(Start.Month = format(Start.Date, '%m')) %>%
select(Fuel.Type.Code, Start.Year, State)
table_grow_afs <- table(grow_afs)
## generate a table, with (x=year, y=fuel)
table_fuel_year <- apply(table_grow_afs, c(2,1), sum)
years_total <- as.numeric(rownames(table_fuel_year))
states_full <- dimnames(table_grow_afs)$State
states_total <- dimnames(table_grow_afs)$State
#table_fuel_state <- apply(table_grow_afs, c(3,1), sum)
### A dataset which can help to transform our states' names
df_name_state <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv",
stringsAsFactors = F)
ABBR = df_name_state$code
FULL = df_name_state$state
for (i in 1:50){
states_full <- replace(states_full,  states_full== ABBR[i], FULL[i])
}
# sort(FULL)
# grow_afs <- grow_afs[grow_afs$State!="DC",]
#
#
# grow_state_condition <- data.frame(state = sort(unique(grow_afs$State)),
#                                    stringsAsFactors = F)
# grow_state_condition$state2 <- grow_state_condition$state
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa')
)
data(df_pop_state)
df_pop_state$region[9] <- "DC"
df_pop_state <- df_pop_state[order(df_pop_state$region),]
rownames(df_pop_state) <- 1:51
###
kaicolorset <- c("Reds","YlOrBr","YlGn","PuBu", "PuRd", "Purples", "Oranges")
#
folder_path_kai <- "../data/vehicle_station/"
temp <- list.files(path = folder_path_kai, pattern = "*.csv")
temp <- paste(folder_path_kai, temp, sep = "")
vehicle_list <- lapply(temp, read.csv, header = T, stringsAsFactors = F)
vehicle_length <- sapply(vehicle_list, nrow)
vehicle_total <-
rbind(vehicle_list[[1]],vehicle_list[[2]],
vehicle_list[[3]],vehicle_list[[4]],
vehicle_list[[5]],vehicle_list[[6]])
vehicle_df <- ddply(vehicle_total, .(Year, Fuel.Type), function(df){
return(sum(df$Number.of.Vehicles))
})
vehicle_df
name_fuel_vehicle <- substr(vehicle_df$Fuel,
nchar(vehicle_df$Fuel)-3,
nchar(vehicle_df$Fuel)-1)
name_fuel_vehicle <- replace(name_fuel_vehicle, name_fuel_vehicle=="EVC", "ELEC")
name_fuel_vehicle <- replace(name_fuel_vehicle, name_fuel_vehicle=="HYD", "HY")
year_vehicle <- as.character(vehicle_df$Year)
fuel_vehicle <- mapply(function(Year, type){
selected_years <- as.numeric(rownames(table_fuel_year)) <= as.numeric(Year)
fuel_number <- sum(table_fuel_year[selected_years,type])
return(fuel_number)
},
year_vehicle,
as.vector(name_fuel_vehicle))
fuel_vehicle_add <- mapply(function(Year, type){
selected_years <- as.numeric(rownames(table_fuel_year)) == as.numeric(Year)
fuel_number <- (table_fuel_year[selected_years,type])
return(fuel_number)
},
year_vehicle,
as.vector(name_fuel_vehicle))
year_total <- as.numeric(tapply(fuel_vehicle, names(fuel_vehicle), sum))
num_year <- as.numeric(table(names(fuel_vehicle)))
fenmu <- rep.int(year_total, num_year)
prop <- fuel_vehicle / fenmu
vehicle_df$Fuel <- fuel_vehicle
vehicle_df$Type <- name_fuel_vehicle
vehicle_df_final <- data.frame(Year = vehicle_df$Year,
Type = vehicle_df$Type,
Vehicle = vehicle_df$V1,
Fuel = vehicle_df$Fuel,
Prop =  prop,
add_fuel = fuel_vehicle_add
)
>>>>>>> Stashed changes
# sapply(ca_vehicle, colnames, c("Year","Vehicles","Comsumption"))
#
# ca_vehicle_df <- ca_vehicle[[1]]
# colnames(ca_vehicle_df) <- c("Year", "Vehicles", "Consumptions")
# ca_vehicle_df$Type = "CNG"
#
# for (i in 2:6){
#   temp_df <- ca_vehicle[[i]]
#   colnames(temp_df) <- c("Year", "Vehicles", "Consumptions")
#   temp_df$Type = substr(temp[i],22,24)
#   ca_vehicle_df <- rbind(ca_vehicle_df, temp_df)
# }
#
### p2 location differences
#
#
#
# names_fuel <- sort(unique(grow_afs$Fuel.Type.Code))
# x <- c(names_fuel,"Total")
# y1 <- unlist(grow_state_condition["CA",3:10])
# y2 <- unlist(grow_state_condition["NY",3:10])
# data <- data.frame(x, y1, y2)
#
# #The default order will be alphabetized unless specified as below:
# data$x <- factor(data$x, levels = data[["x"]])
#
# p <- plot_ly(data, x = ~x, y = ~y1, type = 'bar', name = paste(), marker = list(color = 'rgb(49,130,189)')) %>%
#   add_trace(y = ~y2, name = 'Secondary Product', marker = list(color = 'rgb(204,204,204)')) %>%
#   layout(xaxis = list(title = "", tickangle = -45),
#          yaxis = list(title = ""),
#          margin = list(b = 100),
#          barmode = 'group')
#
# p
#
#
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa')
# )
#
#
#
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')
# # restrict from June to September
# df <- subset(df, Month %in% 6:9)
# # ordered factor variable with month abbreviations
# df$abbrev <- ordered(month.abb[df$Month], levels = month.abb[6:9])
# # September totals
# df9 <- subset(df, Month == 9)
# # common plot options
# g <- list(
#   scope = 'africa',
#   showframe = F,
#   showland = T,
#   landcolor = toRGB("grey90")
# )
#
# g1 <- c(
#   g,
#   resolution = 50,
#   showcoastlines = T,
#   countrycolor = toRGB("white"),
#   coastlinecolor = toRGB("white"),
#   projection = list(type = 'Mercator'),
#   list(lonaxis = list(range = c(-15, -5))),
#   list(lataxis = list(range = c(0, 12))),
#   list(domain = list(x = c(0, 1), y = c(0, 1)))
# )
#
# g2 <- c(
#   g,
#   showcountries = F,
#   bgcolor = toRGB("white", alpha = 0),
#   list(domain = list(x = c(0, .6), y = c(0, .6)))
# )
#
# zipcode <- read.csv("../data/zip_codes_states.csv")
# new_df <- melt(df_fuel_state_int)
# new_zipcode$Lat <- tapply(new_df)
#
# p <- new_df %>%
#   plot_geo(
#     locationmode = 'USA-states', sizes = c(1, 1000), color = I("black")
#   ) %>%
#   layout(
#     title = 'Ebola cases reported by month in West Africa 2014<br> Source: <a href="https://data.hdx.rwlabs.org/dataset/rowca-ebola-cases">HDX</a>',
#     geo = g
#   ) %>%
#
#     add_markers(
#     y = ~Lat, x = ~Lon, locations = ~state,
#     size = ~ value, color = ~ variable, text = ~paste(Value, "cases")
#   ) %>%
#   add_trace(
#     data = df_fuel_state_int[,1:7], z = ~df_fuel_state_int[,1:7], locations = ~state,
#     showscale = F, geo = g
#   ) %>%
#   p
#
#
#
#  data.frame(table_grow_afs[,"1971",])
#
#
# data(gapminder, package = "gapminder")
# gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
#   geom_point(aes(size = pop, frame = year)) +
#   scale_x_log10()
# ggplotly(gg)
#
# find_info <- function(year, state){
#     Fuel.Type <- names(which.max(table_grow_afs[,as.character(year:(year+3))), state]))
#     Sum.Year <- sum(table_grow_afs[,as.character(year), state])
#     return(c(year, state, Fuel.Type, Sum.Year))
# }
# ma <- t(mapply(find_info,rep(seq(1970,2014,4), each=51),rep(states_total,time = 12)))
# ani_df <- data.frame(Year = as.numeric(ma[,1]), State  = factor(ma[,2]),
#                      Fuel = factor(ma[,3]), Total = as.numeric(ma[,4]),
#                      stringsAsFactors = FALSE)
# ani_df
#
# #
kaicolorset2 <- c("red","blue","orange","brown","black","green")
# p33 <- plot_ly(vehicle_df_final, x = ~Fuel, y = ~Vehicle,text = ~Type,
#                type = 'scatter', mode = 'markers', frame = ~Year,
#              marker = list(size = ~30*(Prop*100)^(1/10), opacity = 0.5,
#                            color = kaicolorset2[vehicle_df_final$Type])) %>%
#   layout(title = 'Gender Gap in Earnings per University',
#          xaxis = list(showgrid = T),
#          yaxis = list(showgrid = T, type="log")) %>%
#   animation_opts(1000, easing = "elastic") %>%
#   animation_button(
#     x = 1, xanchor = "right", y = 0, yanchor = "top"
#   ) %>%
#   animation_slider(
#     currentvalue = list(prefix = "Year ", font = list(color="red"))
#   )
# p33
vehicle_df_final2 <- vehicle_df_final[order(vehicle_df_final$Type),]
rownames(vehicle_df_final2) <- 1:53
vehicle_df_final2 <- rbind(vehicle_df_final2[c(1,12,17,28,32,43),],
vehicle_df_final2)
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Type),]
vehicle_df_final2$Speed <- c(1,(vehicle_df_final2$Vehicle[2:59]-vehicle_df_final2$Vehicle[1:58]) / vehicle_df_final2$Vehicle[1:58])
rownames(vehicle_df_final2) <- 1:59
vehicle_df_final2 <- vehicle_df_final2[-c(1,13,19,31,36,48),]
makeupdata <- matrix(data = c(2004, "E85", 0,0,0,0,0,
2004, "HY",0,0,0,0,0,
2005, "E85", 0,0,0,0,0,
2005, "HY",0,0,0,0,0,
2006, "E85", 0,0,0,0,0,
2006, "HY",0,0,0,0,0,
2007, "E85", 0,0,0,0,0,
2007, "HY",0,0,0,0,0,
2008, "E85", 0,0,0,0,0,
2008, "HY",0,0,0,0,0,
2009, "E85", 0,0,0,0,0,
2009, "HY",0,0,0,0,0,
2010, "HY",0,0,0,0,0), ncol = 7, byrow = T)
makeupdata <- data.frame(makeupdata)
colnames(makeupdata) <- c("Year","Type","Vehicle","Fuel","Prop","Speed","add_fuel")
vehicle_df_final2 <- rbind(vehicle_df_final2, makeupdata)
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Type),]
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Year),]
vehicle_df_final2$Year <- as.numeric(vehicle_df_final2$Year)
vehicle_df_final2$Vehicle <- as.numeric(vehicle_df_final2$Vehicle)
vehicle_df_final2$Fuel <- as.numeric(vehicle_df_final2$Fuel)
vehicle_df_final2$Speed <- as.numeric(vehicle_df_final2$Speed)
vehicle_df_final2$Prop <- as.numeric(vehicle_df_final2$Prop)
vehicle_df_final2$Type <- factor(vehicle_df_final2$Type)
vehicle_df_final2$add_fuel <- as.numeric(vehicle_df_final2$add_fuel)
### 21 rep.int(year_total, num_year)
initial_vehicles2 <- rep(c(41711,254077,2227,33,1166,26978),  11)
vehicle_df_final2$Vehicle_scale <- vehicle_df_final2$Vehicle / initial_vehicles2
###
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/2) * 50, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Vehicles',
xaxis = list(title = 'Fuel Stations Accumulation',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5300),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
range = c(0, 4),
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
>>>>>>> origin/master
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
<<<<<<< Updated upstream
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
rownames(vehicle_df_final2) <- 1:nrow(vehicle_df_final2)
fuel_vehicle_add3 <- fuel_vehicle_add[-c(1,2,3,4,27,33)]
regular <- which(vehicle_df_final2$Speed ==0)
regular <- regular[1:(length(regular)-1)]
vehicle_df_final3 <- vehicle_df_final2[-regular,]
reg_df <- data.frame(add_station = fuel_vehicle_add3,
rate_increasing = vehicle_df_final3$Speed,
Type = vehicle_df_final3$Type,
Year = vehicle_df_final3$Year)
reg_df <- reg_df[order(reg_df$rate_increasing),]
p35 <- reg_df %>%
plot_ly(x = ~rate_increasing, y = ~add_station, color = ~Type,
text = ~paste(Year)) %>%
layout(
xaxis = list(title = 'Rate of increasing vehicles',
gridcolor = 'rgb(255, 255, 255)',
range = c(-0.5,0.5),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Stations added in one year(log)',
gridcolor = 'rgb(255, 255, 255)',
type = "log",
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2)
)
# p35
# Years_available <- unique(vehicle_df_final3$Year[selected_rows])
# REG_FUEL_ADD <- as.numeric(table_fuel_year[as.character(Years_available),input$fuel_type_reg])
# REG_VEH_NUM <- vehicle_df_final3$Speed[selected_rows]
#
#
# p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# p
#
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)%>%
layout(
xaxis = list(title = 'Number of Stations',
#  gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1),
yaxis = list(title = 'Vehicles',
#  gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1)
)
runApp('~/Downloads/Spr2017-proj2-grp7-master 2/app_kai')
=======
<<<<<<< HEAD
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
source('~/Documents/graduate/applied data science/Spr2017-proj2-grp7/lib/Kai_code.R')
>>>>>>> origin/master
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
detach("package:graphics", unload=TRUE)
library("acs", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("choroplethrCalifornia")
shiny::runApp('~/Downloads/Spr2017-proj2-grp7/app_kai')
detach("package:graphics", unload=TRUE)
library("graphics", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
runApp('~/Downloads/Spr2017-proj2-grp7/app_kai')
runApp('~/Downloads/Spr2017-proj2-grp7/app_kai')
shiny::runApp()
shiny::runApp()
runApp()
geocode("Columbia university")
add<-"Columbia University"
addr<-as.numeric(geocode(add)[2:1])
fileUrl<-"https://developer.nrel.gov/api/alt-fuel-stations/v1/nearest.csv?api_key=Qf1NPRTeyq65qExWvjIVoGmqxyNu6QxYEHgFrZM4&"
fileUrl<-paste0(fileUrl,"latitude=",addr[2],"&longitude=",addr[1])
download.file(fileUrl,'./route.csv','curl')
getwd()
addr<-as.numeric(geocode(add)[2:1])
fileUrl<-"https://developer.nrel.gov/api/alt-fuel-stations/v1/nearest.csv?api_key=Qf1NPRTeyq65qExWvjIVoGmqxyNu6QxYEHgFrZM4&"
fileUrl<-paste0(fileUrl,"latitude=",addr[2],"&longitude=",addr[1])
download.file(fileUrl,'../data/nearbystation.csv','curl')
df<-read.table("../data/nearbystation.csv",header=TRUE)
df<-read.csv("../data/nearbystation.csv",header=TRUE)
View(df)
station<-data.frame(lat,lng)
station<-data.frame(lat=NULL,lng=NULL)
station
View(stations)
sift.station<-function(scoord,ecoord,type,network,connector){
station.o<-data.frame(lat=as.numeric(stations$Latitude),
lng=as.numeric(stations$Longitude),
t=stations$Fuel.Type.Code
net=stations$EV.Network,
con=stations$EV.Connector.Types)
station<-data.frame(lat=NULL,lng=NULL,t=NULL,net=NULL,con=NULL)
m<-length(type)
for (i in 1:m){
if (type[m]!="ELEC")
station<-rbind(station,station.o[station.o$t==type[m],])
else {
station<-rbind(station,station.o[station.o$t==type[m]&station.o$net==network&station.o$con==connector,])
}
}
x<-ecoord-scoord
station.dir<-data.frame(lat=(station$lat-scoord[2]),lng=(station$lng-scoord[1]))
station.l<-station.dir$lat^2+station.dir$lng^2
l<-station.dir$lat*x[2]+station.dir$lng*x[1]
l<-l/station.l
i1<-which.max(l)
i2<-which.max(l[-i1])
return(c(station$lat[i1],station$lng[i1],station$lat[i2],station$lng[i2]))
}
Shortest<-function(New.Segments,U.Nodes,Start.ID,End.ID){
float <- 0.01
Start <- U.Nodes[Start.ID,]
End <- U.Nodes[End.ID,]
Segments <- New.Segments
Segments$Distance<-rep(1,nrow(Segments))
df <- as.data.frame(Segments[c("Start","End","Distance")])
names(df) <- c("start_node","end_node","dist")
gdf <- graph.data.frame(df, directed=FALSE)
SHORT.Go = shortest_paths(gdf,as.character(Start.ID),as.character(End.ID),weights = E(gdf)$dist)$vpath
EDGE.Go = as.numeric(shortest_paths(gdf,as.character(Start.ID),as.character(End.ID),output = "epath",weights = E(gdf)$dist)$epath[[1]])
names<-V(gdf)$name
Sequence.Go =as.numeric(lapply(SHORT.Go,function(x){names[x]})[[1]])
EDGE.Back = rev(EDGE.Go)
EDGE.index = c(EDGE.Go,EDGE.Back[-1])
EDGE = Segments[EDGE.index,]
Sequence.Back = rev(Sequence.Go)
Sequence = c(Sequence.Go,Sequence.Back[-1])
return(list(Path = EDGE,edge.index =c(EDGE.Go,EDGE.Back[-1]),Nodes.Go = Nodes[Sequence.Go,1:2],Nodes.Back = Nodes[Sequence.Back,1:2]))
}
GetLength<-function(Edge){
GL<-function(r){
return(distm(r[1:2],r[3:4],fun = distHaversine)[,1]/1000)
}
D = apply(Edge,1,GL)
return(sum(D))
}
Findpath<-function(start,end,Nodes=Nodes,Segments=Segments,stations=stations,type=c("CNG","ELEC"),network,connector){
startCoord<-as.numeric(geocode(start)[2:1])
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-as.numeric(geocode(end)[2:1])
end.Node <- Nearest.Node(Nodes,endCoord)
fuel.stat<-sift.station(startCoord,endCoord,type,network,connector)[2:1]
station.Node<-Nearest.Node(Nodes,fuel.stat)
Path1 <- Shortest(Segments,Nodes,start.Node,station.Node)
Path2 <- Shortest(Segments,Nodes,station.Node,end.Node)
Path <-list(Path=rbind(Path1$Path,Path2$Path),
edge.index=c(Path1$edge.index,Path2$edge.index),
Nodes.Go=rbind(Path1$Nodes.Go,Path2$Nodes.Go),
Nodes.Back=rbind(Path2$Nodes.Back,Path1$Nodes.Back))
#Edge.index = Path$edge.index
#Edge = Path$Path
#colnames(startCoord) = c("Longtitude","Latitude")
#colnames(endCoord) = c("Longtitude","Latitude")
Route.Go = rbind(startCoord,Path$Nodes.Go,endCoord)
Route.Back = rbind(endCoord,Path$Nodes.Back,startCoord)
#EDGE = Segments[Edge.index,]
#Length = GetLength(EDGE)
#Route.Score = sum(1/Edge$Distance)/nrow(Edge)
#,Edge = EDGE ,Length = Length, Score = Route.Score,End.Point = endCoord))
return(list(go=Route.Go,back=Route.Back))
}
Nearest.station<-function(add){
addr<-as.numeric(geocode(add)[2:1])
fileUrl<-"https://developer.nrel.gov/api/alt-fuel-stations/v1/nearest.csv?api_key=Qf1NPRTeyq65qExWvjIVoGmqxyNu6QxYEHgFrZM4&"
fileUrl<-paste0(fileUrl,"latitude=",addr[2],"&longitude=",addr[1])
download.file(fileUrl,'../data/nearbystation.csv','curl')
df<-read.csv("../data/nearbystation.csv",header=TRUE)
return(list(lat=as.numeric(df$Latitude),lng=as.numeric(df$Longitude)))
}
Findpath("Columbia University","time square")
Findpath<-function(start,end,Nodes=Nodes,Segments=Segments,stations=stations,type=c("CNG","ELEC"),network="ChargePoint Network",connector="NEMA520"){
startCoord<-as.numeric(geocode(start)[2:1])
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-as.numeric(geocode(end)[2:1])
end.Node <- Nearest.Node(Nodes,endCoord)
fuel.stat<-sift.station(startCoord,endCoord,type,network,connector)[2:1]
station.Node<-Nearest.Node(Nodes,fuel.stat)
Path1 <- Shortest(Segments,Nodes,start.Node,station.Node)
Path2 <- Shortest(Segments,Nodes,station.Node,end.Node)
Path <-list(Path=rbind(Path1$Path,Path2$Path),
edge.index=c(Path1$edge.index,Path2$edge.index),
Nodes.Go=rbind(Path1$Nodes.Go,Path2$Nodes.Go),
Nodes.Back=rbind(Path2$Nodes.Back,Path1$Nodes.Back))
#Edge.index = Path$edge.index
#Edge = Path$Path
#colnames(startCoord) = c("Longtitude","Latitude")
#colnames(endCoord) = c("Longtitude","Latitude")
Route.Go = rbind(startCoord,Path$Nodes.Go,endCoord)
Route.Back = rbind(endCoord,Path$Nodes.Back,startCoord)
#EDGE = Segments[Edge.index,]
#Length = GetLength(EDGE)
#Route.Score = sum(1/Edge$Distance)/nrow(Edge)
#,Edge = EDGE ,Length = Length, Score = Route.Score,End.Point = endCoord))
return(list(go=Route.Go,back=Route.Back))
}
runApp()
Findpath("Columbia University","time square")
View(Findpath)
View(Nearest.Node)
View(Nearest.station)
View(Nearest.Node)
View(Nearest.Node)
View(Nearest.Node)
Findpath("Columbia University","time square")
Nearest.station("Columbia University")
runApp()
s<-"Columbia University"
e<-"time square"
Findpath(s,e)
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
View(stations)
runApp()
stations$Fuel.Type.Code[1:6]
stations$Fuel.Type.Code[1]=="CNG"
runApp()
stations$Fuel.Type.Code=="CNG"
stations$Fuel.Type.Code=="CNG"&stations$State=="NY"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
s
s<-"columbia university"
e<-"time square"
start<-"columbia university"
end<-"time square"
startCoord<-as.numeric(geocode(start)[2:1])
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-as.numeric(geocode(end)[2:1])
end.Node <- Nearest.Node(Nodes,endCoord)
fuel.stat<-sift.station(startCoord,endCoord,fueltype)[2:1]
fuel.stat<-sift.station(startCoord,endCoord,fueltype=c("CNG","ELEC"))[2:1]
fuel.stat<-sift.station(startCoord,endCoord,type=c("CNG","ELEC"))[2:1]
station.Node<-Nearest.Node(Nodes,fuel.stat)
fuel.stat2<-sift.station(startCoord,endCoord,fueltype)[4:3]
fuel.stat2<-sift.station(startCoord,endCoord,type=c("CNG","ELEC"))[4:3]
station.Node2<-Nearest.Node(Nodes,fuel.stat2)
Path1 <- Shortest(Segments,Nodes,start.Node,station.Node)
Path2 <- Shortest(Segments,Nodes,station.Node,end.Node)
Path <-list(Path=rbind(Path1$Path,Path2$Path),
edge.index=c(Path1$edge.index,Path2$edge.index),
Nodes.Go=rbind(Path1$Nodes.Go,Path2$Nodes.Go))
P1 <- Shortest(Segments,Nodes,start.Node,station.Node2)
P2 <- Shortest(Segments,Nodes,station.Node2,end.Node)
P <-list(Path=rbind(P1$Path,P2$Path),
edge.index=c(P1$edge.index,P2$edge.index),
Nodes.Back=rbind(P2$Nodes.Back,P1$Nodes.Back))
Route.Go = rbind(startCoord,Path$Nodes.Go,endCoord)
Route.Back = rbind(endCoord,P$Nodes.Back,startCoord)
runApp()
runApp()
Route.Back
runApp()
runApp()
runApp()
myroute<-Findpath(start,end,Nodes,Segments,stations)
myroute[[1]]
myroute[[2]]
fuel.stat2<-sift.station(startCoord,endCoord,fueltype)[4:3]
sift.station(startCoord,endCoord,type=c("CNG","ELEC"))
View(Route.Back)
View(Route.Back)
View(Route.Go)
runApp()
runApp()
runApp()
Path$Nodes.Go
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
grep("a","cat")
grep("a","caat")
grep("a","dog")
grepl("a","cat")
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
Nearest.station("Columbia University")
stations[s,]
s
s<-"stations$Fuel.Type.Code==type[i]"
s<-paste0("stations$Fuel.Type.Code==",type[i])
s<-paste0("stations$Fuel.Type.Code==","CNG")
s
stations[s,]
runApp()
Findpath(start="Columbia University",end="time square")
runApp()
runApp()
runApp()
runApp()
=======
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
rownames(vehicle_df_final2) <- 1:nrow(vehicle_df_final2)
fuel_vehicle_add3 <- fuel_vehicle_add[-c(1,2,3,4,27,33)]
regular <- which(vehicle_df_final2$Speed ==0)
regular <- regular[1:(length(regular)-1)]
vehicle_df_final3 <- vehicle_df_final2[-regular,]
reg_df <- data.frame(add_station = fuel_vehicle_add3,
rate_increasing = vehicle_df_final3$Speed,
Type = vehicle_df_final3$Type,
Year = vehicle_df_final3$Year)
reg_df <- reg_df[order(reg_df$rate_increasing),]
p35 <- reg_df %>%
plot_ly(x = ~rate_increasing, y = ~add_station, color = ~Type,
text = ~paste(Year)) %>%
layout(
xaxis = list(title = 'Rate of increasing vehicles',
gridcolor = 'rgb(255, 255, 255)',
range = c(-0.5,0.5),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Stations added in one year(log)',
gridcolor = 'rgb(255, 255, 255)',
type = "log",
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2)
)
# p35
# Years_available <- unique(vehicle_df_final3$Year[selected_rows])
# REG_FUEL_ADD <- as.numeric(table_fuel_year[as.character(Years_available),input$fuel_type_reg])
# REG_VEH_NUM <- vehicle_df_final3$Speed[selected_rows]
#
#
# p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# p
#
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)%>%
layout(
xaxis = list(title = 'Number of Stations',
#  gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1),
yaxis = list(title = 'Vehicles',
#  gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1)
)
runApp('~/Downloads/Spr2017-proj2-grp7-master 2/app_kai')
<<<<<<< HEAD
setwd("~/Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai")
shiny::runApp()
runApp()
runApp()
library(dplyr)
runApp('~/Downloads/Spr2017-proj2-grp7-master 2/app_kai')
runApp()
shiny::runApp()
=======
>>>>>>> origin/master
>>>>>>> Stashed changes
>>>>>>> origin/master
