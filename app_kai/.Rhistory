<<<<<<< HEAD
p33
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year, type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5, color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = F))
p33
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year, type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5, color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T))
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year, type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5, color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T))
p33
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year, type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5, color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
=======
shiny::runApp()
runApp('~/Documents/graduate/applied data science/Spr2017-proj2-grp7/app_kai')
runApp('~/Documents/graduate/applied data science/Spr2017-proj2-grp7/app_kai')
install.packages("UScensus2010")
runApp('~/Documents/graduate/applied data science/Spr2017-proj2-grp7/app_kai')
runApp('~/Documents/graduate/applied data science/Spr2017-proj2-grp7/routine/routine')
runApp('~/Documents/graduate/applied data science/Spr2017-proj2-grp7/doc/Yue Gao')
runApp('~/Documents/graduate/applied data science/Spr2017-proj2-grp7/app_kai')
fileUrl3<-"http://api.eia.gov/category/?api_key=b9c6ff47fef042ed1587bfea3fe7c2d1&category_id=711224"
download.file(fileUrl3,'./vehicle.csv','curl')
download.file(fileUrl3,'./vehicle.csv','curl')
fileUrl3<-"http://api.eia.gov/category/?api_key=b9c6ff47fef042ed1587bfea3fe7c2d1&category_id=711224"
download.file(fileUrl3,'./vehicle.csv','curl')
getwd()
setwd(/Users/liyaqin/Documents/graduate/applied data science/Spr2017-proj2-grp7/liyaqin)
setwd("/Users/liyaqin/Documents/graduate/applied data science/Spr2017-proj2-grp7/liyaqin")
download.file(fileUrl3,'./vehicle.csv','curl')
runApp('~/Documents/graduate/applied data science/Spr2017-proj2-grp7/app_kai')
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
base <- df_fake %>%
plot_ly(x = ~Station, y = ~Vehicle, size = ~(Prop),
hoverinfo = "text", trace = Year) %>%
layout() %>%
add_markers(color = ~Fuel, frame = ~Year, ids = ~State) %>%
>>>>>>> origin/master
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
<<<<<<< HEAD
p33
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)',
trace = Year)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
=======
base <- df_fake %>%
plot_ly(x = ~Station, y = ~Vehicle, size = ~(Prop),
hoverinfo = "text", trace = Year) %>%
layout() %>%
add_markers(color = ~Fuel, frame = ~Year, ids = ~State) %>%
>>>>>>> origin/master
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
<<<<<<< HEAD
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000)
)
?plot_ly
?animation_opts
data(gapminder, package = "gapminder")
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
ggplotly(gg)
ggplotly()
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = pop, ids = country)) +
scale_x_log10()
gapminder
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop)) +
scale_x_log10()
ggplotly(gg)
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
ggplotly(gg)
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year)) +
scale_x_log10()
ggplotly(gg)
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = country)) +
scale_x_log10()
ggplotly(gg)
gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year)) +
scale_x_log10()
ggplotly(gg)
?ggplotly()
base <- df_fake %>%
plot_ly(x = ~Station, y = ~Vehicle, size = ~(Prop),
hoverinfo = "text") %>%
layout() %>%
add_markers(color = ~Fuel, frame = ~Year, ids = ~State) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
base
base <- df_fake %>%
plot_ly(x = ~Station, y = ~Vehicle, size = ~(Prop),
hoverinfo = "text", trace = Year) %>%
layout() %>%
add_markers(color = ~Fuel, frame = ~Year, ids = ~State) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
base
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33
?animation_slider()
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame =Year
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33
str(p33)
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000)
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame =Year
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
class(p33)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers'
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = Year,
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = 1:21)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000),
Col = rep(c("Green","Red"),10)
)
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000),
Col = c(rep(c("Green","Red"),10),"Red")
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = Col)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000),
Col = c(rep(c("Green","Red"),10),"Red")
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = Col)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = ~Col)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33
shiny::runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
# load packages
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
library(plotly)
library(tibble)
source("../lib/Kai_code.R")
setwd("~/Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai")
path_alt_fuel_station <- "../data/alt_fuel_stations (Feb 12 2017).csv"
alt_fuel_station <- read.csv(path_alt_fuel_station,
stringsAsFactors = F,
header = T)
nrow(alt_fuel_station)
grow_afs <-
tbl_df(alt_fuel_station)  %>%
select(Fuel.Type.Code, Expected.Date, Open.Date, State) %>%
filter((nchar(Expected.Date)!=0)|(nchar(Open.Date)!=0))  %>%
mutate(Start.Date = as.Date(ifelse(nchar(Expected.Date)!=0,
Expected.Date,
Open.Date))) %>%
mutate(Start.Year = format(Start.Date, '%Y')) %>%
mutate(Start.Month = format(Start.Date, '%m')) %>%
select(Fuel.Type.Code, Start.Year, State)
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
source("fakedata.R")
z <- c(1,1,1)
n =10
Sdata <- fakedata(z,n)
classify <- function(S,z){
result <- ifelse(S %*% z> 0 , 1, -1)
return(result)
}
classify(Sdata$S,z)
Cost_function <- function(S,y,z){
sum((classify(S,z) != y) * abs(S %*% z))
}
Cost_dev_function <- function(S,y,z){
colSums(as.numeric(classify(S,z) != y) * (-y) * S)
}
perceptrain <- function(S,y){
z <- c(runif(ncol(S)-1),1)
z <- c(1,-1,1)
Z_history <- z
dc <- Cost_dev_function(S,y,z)
k <- 1
while(Cost_function(S,y,z) != 0){
dc <- Cost_dev_function(S,y,z)
z <- z - (1/k) * dc
Z_history <- rbind(Z_history, z)
k <- k + 1
}
return(list(z=z, Z_history = Z_history))
}
#  perceptrain(Sdata$S,Sdata$y)
z <- rnorm(3)
Sdata2 <- fakedata(z,100)
z_train <- perceptrain(Sdata2$S, Sdata2$y)
Sdata3 <- fakedata(z,100)
correct_rate <- sum(classify(Sdata3$S,z_train$z) == Sdata3$y) /100
correct_rate
#  z_train
test_data <- Sdata3$S[,1:2]
plot(test_data, col = factor(Sdata3$y), main = "Test Data",
xlab = "", ylab = "")
slope <- - z_train$z[1] / z_train$z[2]
intercept <- - z_train$z[3] / z_train$z[2]
abline(intercept, slope)
z_train
slope.t <- - z_train$Z_history[,1] / z_train$Z_history[,2]
intercept.t <- - z_train$Z_history[3] / z_train$Z_history[2]
intercept.t
slope.t <- - z_train$Z_history[,1] / z_train$Z_history[,2]
intercept.t <- - z_train$Z_history[,3] / z_train$Z_history[,2]
slope.t
train_data <- Sdata2$S[,1:2]
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept.t,slope.t)
abline(intercept.t[1],slope.t[1])
intercept.t
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
abline(intercept.t[1],slope.t[1])
intercept.t[1]
slope.t[1]
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
abline(intercept.t[1],slope.t[1])
train_data <- Sdata2$S[,1:2]
z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
abline(intercept.t[1],slope.t[1])
train_data <- Sdata2$S[,1:2]
z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
abline(intercept.t,slope.t)
abline(intercept[2].t,slope.t[2])
abline(intercept[2].t,slope.t[2])
abline(intercept[2].t,slope.t[2])
abline(intercept.t[2],slope.t[2])
plot(1,1)
abline(c(1,2),c(1,1))
plot(-1:1,-1:1)
abline(c(1,2),c(1,1))
abline(c(2,1),c(1,1))
train_data <- Sdata2$S[,1:2]
z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope, "green")
for (i in 1:(length(z_train$z)-1)) {abline(intercept.t[i],slope.t[i])}
train_data <- Sdata2$S[,1:2]
#z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope, "green")
for (i in 1:(length(z_train$z)-1)) {abline(intercept.t[i],slope.t[i])}
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
slope.t
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
intercept.t
(length(z_train$z)-1)
z_train$z
(nrow(z_train$Z_history)-1)
=======
base <- df_fake %>%
plot_ly(x = ~Station, y = ~Vehicle, size = ~(Prop),
hoverinfo = "text", trace = Year) %>%
layout() %>%
add_markers(color = ~Fuel, frame = ~Year, ids = ~State) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
source('~/Documents/graduate/applied data science/Spr2017-proj2-grp7/lib/Kai_code.R')
>>>>>>> origin/master
runApp()
