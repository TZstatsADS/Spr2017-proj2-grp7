2006, "E85", 0,0,0,0,0,
2006, "HY",0,0,0,0,0,
2007, "E85", 0,0,0,0,0,
2007, "HY",0,0,0,0,0,
2008, "E85", 0,0,0,0,0,
2008, "HY",0,0,0,0,0,
2009, "E85", 0,0,0,0,0,
2009, "HY",0,0,0,0,0,
2010, "HY",0,0,0,0,0), ncol = 7, byrow = T)
makeupdata <- data.frame(makeupdata)
colnames(makeupdata) <- c("Year","Type","Vehicle","Fuel","Prop","Speed","add_fuel")
vehicle_df_final2 <- rbind(vehicle_df_final2, makeupdata)
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Type),]
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Year),]
vehicle_df_final2$Year <- as.numeric(vehicle_df_final2$Year)
vehicle_df_final2$Vehicle <- as.numeric(vehicle_df_final2$Vehicle)
vehicle_df_final2$Fuel <- as.numeric(vehicle_df_final2$Fuel)
vehicle_df_final2$Speed <- as.numeric(vehicle_df_final2$Speed)
vehicle_df_final2$Prop <- as.numeric(vehicle_df_final2$Prop)
vehicle_df_final2$Type <- factor(vehicle_df_final2$Type)
vehicle_df_final2$add_fuel <- as.numeric(vehicle_df_final2$add_fuel)
### 21 rep.int(year_total, num_year)
initial_vehicles2 <- rep(c(41711,254077,2227,33,1166,26978),  11)
vehicle_df_final2$Vehicle_scale <- vehicle_df_final2$Vehicle / initial_vehicles2
###
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/2) * 50, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Vehicles',
xaxis = list(title = 'Fuel Stations Accumulation',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5300),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
range = c(0, 4),
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
rownames(vehicle_df_final2) <- 1:nrow(vehicle_df_final2)
fuel_vehicle_add3 <- fuel_vehicle_add[-c(1,2,3,4,27,33)]
regular <- which(vehicle_df_final2$Speed ==0)
regular <- regular[1:(length(regular)-1)]
vehicle_df_final3 <- vehicle_df_final2[-regular,]
reg_df <- data.frame(add_station = fuel_vehicle_add3,
rate_increasing = vehicle_df_final3$Speed,
Type = vehicle_df_final3$Type,
Year = vehicle_df_final3$Year)
reg_df <- reg_df[order(reg_df$rate_increasing),]
p35 <- reg_df %>%
plot_ly(x = ~rate_increasing, y = ~add_station, color = ~Type,
text = ~paste(Year)) %>%
layout(
xaxis = list(title = 'Rate of increasing vehicles',
gridcolor = 'rgb(255, 255, 255)',
range = c(-0.5,0.5),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Stations added in one year(log)',
gridcolor = 'rgb(255, 255, 255)',
type = "log",
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2)
)
# p35
# Years_available <- unique(vehicle_df_final3$Year[selected_rows])
# REG_FUEL_ADD <- as.numeric(table_fuel_year[as.character(Years_available),input$fuel_type_reg])
# REG_VEH_NUM <- vehicle_df_final3$Speed[selected_rows]
#
#
# p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# p
#
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)%>%
layout(
xaxis = list(title = 'Number of Stations',
#  gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1),
yaxis = list(title = 'Vehicles',
#  gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1)
)
runApp('~/Downloads/Spr2017-proj2-grp7-master 2/app_kai')
setwd("~/Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai")
shiny::runApp()
runApp()
runApp()
library(dplyr)
runApp('~/Downloads/Spr2017-proj2-grp7-master 2/app_kai')
runApp()
shiny::runApp()
setwd("~/Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai")
shiny::runApp()
runApp()
df_state_area <- read.csv("../data/State_Areas.csv",
header = T,
stringsAsFactors = T)
str(df_state_area)
df_state_area <- read.csv("../data/State_Areas.csv",
header = F,
stringsAsFactors = T)
str(df_state_area)
df_state_area <- read.csv("../data/State_Areas.csv",
header = F,
stringsAsFactors = F)
str(df_state_area)
areas <- df_state_area$V4
areas
areas <- substr(areas, nchar(areas)-4, nchar(areas))
areas
str(df_state_area)
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-5)
areas
str(df_state_area)
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
areas
sapply(areas, replace, ",","")
replace(areas[1],",",)
replace(areas[1],",","")
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
grep1 <- grep(pattern=",",areas)
substr(areas[grep1],
regexpr(pattern = ",",areas[grep1]),
regexpr(pattern = ",",areas[grep1]))<-"."
areas
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
grep1 <- grep(pattern=",",areas)
substr(areas[grep1],
regexpr(pattern = ",",areas[grep1]),
regexpr(pattern = ",",areas[grep1]))
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
grep1 <- grep(pattern=",",areas)
substr(areas[grep1],
regexpr(pattern = ",",areas[grep1]),
regexpr(pattern = ",",areas[grep1]))<-""
areas
areas <- substr(areas[grep1],
regexpr(pattern = ",",areas[grep1]),
regexpr(pattern = ",",areas[grep1]))<-""
areas
grep1 <- grep(pattern=",",areas)
grep1
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
grep1 <- grep(pattern=",",areas)
grep1
grep1 <- ggrep(pattern=",",areas)
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
areas
gregexpr(pattern = ",",areas[grep1])
grep1 <- ggrep(pattern=",",areas)
grep1 <- grep(pattern=",",areas)
areas <- substr(areas[grep1],
gregexpr(pattern = ",",areas[grep1]),
gregexpr(pattern = ",",areas[grep1]))<-""
substr(areas[grep1],
gregexpr(pattern = ",",areas[grep1]),
gregexpr(pattern = ",",areas[grep1]))<-""
gregexpr(pattern = ",",areas[grep1])
gregexpr(pattern = ",",areas[grep1])[1]
gregexpr(pattern = ",",areas[grep1])[[1]]
gregexpr(pattern = ",",areas[grep1])[[1]][1]
gregexpr(pattern = ",",areas[grep1])[[1]][2]
gregexpr(pattern = ",",areas[grep1])[[1]][3]
gregexpr(pattern = ",",areas[grep1])[[1]][4]
gregexpr(pattern = ",",areas[grep1])[[1]]
aa <- gregexpr(pattern = ",",areas[grep1])[[1]]
aa
substr(areas[grep1],
regexpr(pattern = ",",areas[grep1]),
regexpr(pattern = ",",areas[grep1]))<-""
areas
substr(areas[grep1],
regexpr(pattern = ",",areas[grep1]),
regexpr(pattern = ",",areas[grep1]))
strsplit(areas[grep1],
regexpr(pattern = ",",areas[grep1]))
strsplit()
strsplit(areas,",")
sapply((areas[grep1], ","), paste, "")
sapply(strsplit(areas[grep1], ","), paste, "")
sapply(strsplit(areas[grep1], ","), paste0)
sapply(strsplit(areas[grep1], ","), paste0)
strsplit(areas[grep1], ",")
strsplit(areas[grep1], ",")
sapply(strsplit(areas[grep1], ","), paste)
sapply(strsplit(areas[grep1], ","), paste, collapes = "")
paste(strsplit(areas[grep1], ",")[1])
paste0(strsplit(areas[grep1], ",")[1])
strsplit(areas[grep1], ","
)
strsplit(areas[grep1], ",")[[1]]
paste(strsplit(areas[grep1], ",")[[1]])
paste(strsplit(areas[grep1], ",")[[1]], collapse = "")
sapply(strsplit(areas[grep1], ","), paste, collapse = "")
Areas <- as.numeric(sapply(strsplit(areas[grep1], ","), paste, collapse = ""))
Areas
str(df_state_area)
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
grep1 <- grep(pattern=",",areas)
Areas <- as.numeric(sapply(strsplit(areas[grep1], ","), paste, collapse = ""))
df_state_area
str(df_state_area)
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
grep1 <- grep(pattern=",",areas)
Areas <- as.numeric(sapply(strsplit(areas[grep1], ","), paste, collapse = ""))
df_state_area <- data.frame(State = df_state_area$V1,
Areas_sq_km = Areas)
str(Areas)
areas <- substr(areas, 1, nchar(areas)-6)
Areas <- as.numeric(sapply(strsplit(areas[grep1], ","), paste, collapse = ""))
df_state_area <- data.frame(State = df_state_area$V1,
Areas_sq_km = Areas)
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
str(areas)
Areas <- as.numeric(sapply(strsplit(areas[grep1], ","), paste, collapse = ""))
chr(Areas)
str(Areas)
(strsplit(areas[grep1], ",")
)
Areas <- as.numeric(sapply(strsplit(areas, ","), paste, collapse = ""))
df_state_area <- data.frame(State = df_state_area$V1,
Areas_sq_km = Areas)
df_state_area
df_pop_state$Staten[51] <- "DC"
df_state_area
df_pop_state$State[51] <- "DC"
df_pop_state$State
df_state_area <- read.csv("../data/State_Areas.csv",
header = F,
stringsAsFactors = F)
str(df_state_area)
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
Areas <- as.numeric(sapply(strsplit(areas, ","), paste, collapse = ""))
df_state_area <- data.frame(State = df_state_area$V1,
Areas_sq_km = Areas)
df_pop_state$region[51] <- "DC"
df_pop_state <- df_pop_state[order(df_pop_state$region),]
df_state_area <- data.frame(State = df_state_area$V1,
Areas_sq_km = Areas)
str(df_state_area)
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
Areas <- as.numeric(sapply(strsplit(areas, ","), paste, collapse = ""))
df_state_area <- data.frame(State = df_state_area$V1,
Areas_sq_km = Areas)
df_state_area$State[51] <- "DC"
df_state_area <- read.csv("../data/State_Areas.csv",
header = F,
stringsAsFactors = F)
str(df_state_area)
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
Areas <- as.numeric(sapply(strsplit(areas, ","), paste, collapse = ""))
df_state_area <- data.frame(State = df_state_area$V1,
Areas_sq_km = Areas)
df_state_area
df_state_area$State[51] <- "DC"
df_state_area$State
df_state_area$State[51]
df_state_area <- data.frame(State = df_state_area$V1,
Areas_sq_km = Areas,
stringsAsFactors = F)
df_state_area$State[51] <- "DC"
df_state_area <- read.csv("../data/State_Areas.csv",
header = F,
stringsAsFactors = F)
str(df_state_area)
areas <- df_state_area$V4
areas <- substr(areas, 1, nchar(areas)-6)
Areas <- as.numeric(sapply(strsplit(areas, ","), paste, collapse = ""))
df_state_area <- data.frame(State = df_state_area$V1,
Areas_sq_km = Areas,
stringsAsFactors = F)
df_state_area$State[51] <- "DC"
for (i in 1:50){
states_full2 <- replace(df_state_area$State,  states_full== ABBR[i], FULL[i])
}
df_state_area$State <- states_full2
df_state_area
ABBR[i]
df_pop_state
data(df_pop_state)
df_pop_state$region[9] <- "DC"
df_pop_state <- df_pop_state[order(df_pop_state$region),]
rownames(df_pop_state) <- 1:51
df_pop_state
df_state_area <- df_state_area[order(df_state_area$State),]
df_state_area
rownames(df_state_are) <- 1:51
rownames(df_state_area) <- 1:51
df_state_area
df_pop_state $region
df_pop_state $region == df_state_area$State
df_pop_state $region == as.lower(df_state_area$State)
df_pop_state $region == lower(df_state_area$State)
dataframe(df_pop_state $region ,(df_state_area$State))
data.frame(df_pop_state $region ,(df_state_area$State))
runApp()
runApp()
runApp()
runApp()
df_state_area$Areas_sq_km
runApp()
color_max <- data.frame(apply(table_grow_afs, c(3,1), sum))
color_max$SUM <- rowSums(color_max)
color_max
color_max$SUM
color_max <- max(color_max[,8])
color_max
max(df_fuel_state_int$tempt)
runApp()
runApp()
color_max
color_max
color_max <- data.frame(apply(table_grow_afs, c(3,1), sum))
color_max
color_max$SUM <- rowSums(color_max)
color_max <- color_max[,8]
color_max <- color_max[,8]
color_max <- color_max[,8]
color_max$SUM <- rowSums(color_max)
color_max <- data.frame(apply(table_grow_afs, c(3,1), sum))
color_max$SUM <- rowSums(color_max)
color_max <- color_max[,8]
color_max
color_max <- color_max[,selected_set]
range_year_v <- c(1971, 2003)
selected_years <- (years_total>= range_year_v[1]) & (years_total <= range_year_v[2])
selected_years_v <- years_total[selected_years]
table_fuel_year_int <- table_fuel_year[selected_years,]
table_fuel_year_int
df_fuel_year_int <- data.frame(table_fuel_year_int)
df_fuel_year_int <- data.frame(table_fuel_year_int)
df_fuel_year_int
rownames(df_fuel_year_int) <- selected_years_v
rownames(df_fuel_year_int)
table_fuel_year_int <- table_fuel_year[selected_years,]
df_fuel_year_int <- data.frame(table_fuel_year_int)
rownames(df_fuel_year_int)
selected_years_v
table_fuel_year_int <- table_fuel_year[selected_years,]
df_fuel_year_int <- data.frame(table_fuel_year_int)
df_fuel_year_int$Year <- factor(rownames(df_fuel_year_int))
df_fuel_year_int$Year <- factor(rownames(df_fuel_year_int))
df_fuel_year_int
df_fuel_state_int
table_fuel_state_int <- apply(table_grow_afs[, selected_years, ], c(3,1), sum)
df_fuel_state_int <- data.frame(table_fuel_state_int)
df_fuel_state_int$SUM <- rowSums(df_fuel_state_int)
df_fuel_state_int$state <- rownames(df_fuel_state_int)
df_fuel_state_int$state2 <- states_full
df_fuel_state_int
data.frame(df_state_area$State,rownames(df_fuel_state_int))
rownames(df_fuel_state_int)
df_fuel_state_int
df_state_area$State
states_abbr <- df_state_area$State
for (i in 1:50){
states_abbr <- replace(states_abbr,  states_abbr== FULL[i], ABBR[i])
}
df_state_area$State <- states_abbr
df_state_area
df_state_area <- df_state_area[order(df_state_area$State),]
df_state_area
df_state_area$State == rownames(df_fuel_state_int)
rownames(df_fuel_state_int)[5]
df_state_area$State
df_state_area$State[5]
df_fuel_state_int
matrix(c(1,2,3,1,2,3,1,2,3),nrow=3) / c(1,2,3)
df_fuel_state_int / df_state_area$Areas_sq_km
df_fuel_state_int[,1:8] <- 10^4 * df_fuel_state_int[,1:8] / df_state_area$Areas_sq_km
df_fuel_state_int
runApp()
color_max <- data.frame(apply(table_grow_afs, c(3,1), sum))
color_max$SUM <- rowSums(color_max)
color_max
data.frame(apply(table_grow_afs, c(3,1), sum))
color_max <- data.frame(apply(table_grow_afs, c(3,1), sum)) / df_state_area$Areas_sq_km
color_max
color_max <- 10^4 * data.frame(apply(table_grow_afs, c(3,1), sum)) / df_state_area$Areas_sq_km
color_max
color_max$SUM <- rowSums(color_max)
color_max
runApp()
color_max <- max(color_max[,8])
color_max
color_max <- 10^4 * data.frame(apply(table_grow_afs, c(3,1), sum)) / df_state_area$Areas_sq_km
color_max$SUM
color_max <- data.frame(apply(table_grow_afs, c(3,1), sum))
color_max <- 10^4 * data.frame(apply(table_grow_afs, c(3,1), sum)) / df_state_area$Areas_sq_km
color_max$SUM <- rowSums(color_max)
color_max
selected_set =1
color_max <- max(color_max[,selected_set])
color_max
df_color <- data.frame(apply(table_grow_afs, c(3,1), sum))
df_color$SUM <- rowSums(df_color)
df_color <- max(df_color[,8])
df_color <- data.frame(apply(table_grow_afs, c(3,1), sum))
df_color$SUM <- rowSums(df_color)
color_max <- max(df_color[,8])
color_max
df_color
df_color <- data.frame(apply(table_grow_afs, c(3,1), sum))
color_max <- 10^4 * data.frame(apply(table_grow_afs, c(3,1), sum)) / df_state_area$Areas_sq_km
df_color$SUM <- rowSums(df_color)
color_max <- max(df_color[,8])
color_max
df_color
df_color <- data.frame(apply(table_grow_afs, c(3,1), sum))
df_color <- 10^4 * data.frame(apply(table_grow_afs, c(3,1), sum)) / df_state_area$Areas_sq_km
df_color$SUM <- rowSums(df_color)
color_max <- max(df_color[,8])
color_max
df_color
df_state_area
color_max
df_fuel_state_int
runApp()
df_fuel_state_int
df_color
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?bsTooltip
From shinyBS v0.61
by Eric Bailey
?bsTooltip
library("shinyBS")
intall.package("shinyBS")
intall.packages("shinyBS")
install.packages("shinyBS")
runApp()
runApp()
?bsTooltip
runApp()
bsExample("Tooltips_and_Popovers"
)
x    <- faithful[, 2]
faithful[,2]
faithful[,1]
faithful[,2]
bsExample("Tooltips_and_Popovers"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
