<<<<<<< HEAD
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
type = "log",
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
vehicle_df_final2
str(vehicle_df_final2)
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~add_fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/3) * 60, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Fuel Stations vs Increasing Speed of Vehicles',
xaxis = list(title = 'Fuel Stations Increase',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 2000),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
type = "log",
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
p34
vehicle_df_final2
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/3) * 60, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Fuel Stations vs Increasing Speed of Vehicles',
xaxis = list(title = 'Fuel Stations Increase',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 2000),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
type = "log",
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/3) * 60, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Fuel Stations vs Increasing Speed of Vehicles',
xaxis = list(title = 'Fuel Stations Increase',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5000),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
type = "log",
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
=======
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
>>>>>>> origin/master
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/3) * 60, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Fuel Stations vs Increasing Speed of Vehicles',
xaxis = list(title = 'Fuel Stations Increase',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5000),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
type = "log",
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/3) * 60, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Fuel Stations vs Increasing Speed of Vehicles',
xaxis = list(title = 'Fuel Stations Increase',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5000),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
# type = "log",
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/3) * 60, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Fuel Stations vs Increasing Speed of Vehicles',
xaxis = list(title = 'Fuel Stations Accumulation',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5000),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
# type = "log",
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/2.5) * 60, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Fuel Stations vs Increasing Speed of Vehicles',
xaxis = list(title = 'Fuel Stations Accumulation',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5000),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
# type = "log",
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/2) * 50, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Fuel Stations vs Increasing Speed of Vehicles',
xaxis = list(title = 'Fuel Stations Accumulation',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5000),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
# type = "log",
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Vehicle_scale, color = ~Type,
size = ~Prop^(1/2) * 50, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Fuel Stations vs Increasing Speed of Vehicles',
xaxis = list(title = 'Fuel Stations Accumulation',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5300),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
range = c(0, 4),
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="Orange"))
)
p34
runApp()
head(vehicle_df_final2)
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, visible = T)
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, col =~ Type, visible = T)
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T)
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", mode = "scatters+lines")
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", mode = "scatters")
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter")
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter",size = 300)
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter",mode = "scatter",size = 300)
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter",mode = "scatters",size = 300)
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 300)
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 50)
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 50)
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 5)
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 1)
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = .5)
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 0.0001)
?plot_ly
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 20, sizes = c(10,100))
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 20, sizes = c(10,10))
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 20, sizes = c(10,20))
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 15, sizes = c(10,20))
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 10, sizes = c(10,20))
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 10, sizes = c(11,15))
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = T,
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = F,
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)%>%
layout(
xaxis = list(title = 'Number of Stations',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2)
)
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)%>%
layout(
xaxis = list(title = 'Number of Stations',
gridcolor = 'green',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'red',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2)
)
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)%>%
layout(
xaxis = list(title = 'Number of Stations',
gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Vehicles',
gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2)
)
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)%>%
layout(
xaxis = list(title = 'Number of Stations',
gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1),
yaxis = list(title = 'Vehicles',
gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1)
)
p36
p36 <-
vehicle_df_final2 %>%
plot_ly(x =~ Fuel, y =~ Vehicle_scale, color =~ Type, visible = "legendonly",
type = "scatter", size = 10, sizes = c(11,15), text =~ Year)%>%
layout(
xaxis = list(title = 'Number of Stations',
#  gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1),
yaxis = list(title = 'Vehicles',
#  gridcolor = 'grey',
zerolinewidth = 1,
ticklen = 5,
gridwidth = 1)
)
p36
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tabBox()
?tabBox()
runApp()
shiny::runApp()
runApp()
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
detach("package:graphics", unload=TRUE)
library("acs", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("choroplethrCalifornia")
shiny::runApp('~/Downloads/Spr2017-proj2-grp7/app_kai')
detach("package:graphics", unload=TRUE)
library("graphics", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
runApp('~/Downloads/Spr2017-proj2-grp7/app_kai')
runApp('~/Downloads/Spr2017-proj2-grp7/app_kai')
shiny::runApp()
shiny::runApp()
runApp()
geocode("Columbia university")
add<-"Columbia University"
addr<-as.numeric(geocode(add)[2:1])
fileUrl<-"https://developer.nrel.gov/api/alt-fuel-stations/v1/nearest.csv?api_key=Qf1NPRTeyq65qExWvjIVoGmqxyNu6QxYEHgFrZM4&"
fileUrl<-paste0(fileUrl,"latitude=",addr[2],"&longitude=",addr[1])
download.file(fileUrl,'./route.csv','curl')
getwd()
addr<-as.numeric(geocode(add)[2:1])
fileUrl<-"https://developer.nrel.gov/api/alt-fuel-stations/v1/nearest.csv?api_key=Qf1NPRTeyq65qExWvjIVoGmqxyNu6QxYEHgFrZM4&"
fileUrl<-paste0(fileUrl,"latitude=",addr[2],"&longitude=",addr[1])
download.file(fileUrl,'../data/nearbystation.csv','curl')
df<-read.table("../data/nearbystation.csv",header=TRUE)
df<-read.csv("../data/nearbystation.csv",header=TRUE)
View(df)
station<-data.frame(lat,lng)
station<-data.frame(lat=NULL,lng=NULL)
station
View(stations)
sift.station<-function(scoord,ecoord,type,network,connector){
station.o<-data.frame(lat=as.numeric(stations$Latitude),
lng=as.numeric(stations$Longitude),
t=stations$Fuel.Type.Code
net=stations$EV.Network,
con=stations$EV.Connector.Types)
station<-data.frame(lat=NULL,lng=NULL,t=NULL,net=NULL,con=NULL)
m<-length(type)
for (i in 1:m){
if (type[m]!="ELEC")
station<-rbind(station,station.o[station.o$t==type[m],])
else {
station<-rbind(station,station.o[station.o$t==type[m]&station.o$net==network&station.o$con==connector,])
}
}
x<-ecoord-scoord
station.dir<-data.frame(lat=(station$lat-scoord[2]),lng=(station$lng-scoord[1]))
station.l<-station.dir$lat^2+station.dir$lng^2
l<-station.dir$lat*x[2]+station.dir$lng*x[1]
l<-l/station.l
i1<-which.max(l)
i2<-which.max(l[-i1])
return(c(station$lat[i1],station$lng[i1],station$lat[i2],station$lng[i2]))
}
Shortest<-function(New.Segments,U.Nodes,Start.ID,End.ID){
float <- 0.01
Start <- U.Nodes[Start.ID,]
End <- U.Nodes[End.ID,]
Segments <- New.Segments
Segments$Distance<-rep(1,nrow(Segments))
df <- as.data.frame(Segments[c("Start","End","Distance")])
names(df) <- c("start_node","end_node","dist")
gdf <- graph.data.frame(df, directed=FALSE)
SHORT.Go = shortest_paths(gdf,as.character(Start.ID),as.character(End.ID),weights = E(gdf)$dist)$vpath
EDGE.Go = as.numeric(shortest_paths(gdf,as.character(Start.ID),as.character(End.ID),output = "epath",weights = E(gdf)$dist)$epath[[1]])
names<-V(gdf)$name
Sequence.Go =as.numeric(lapply(SHORT.Go,function(x){names[x]})[[1]])
EDGE.Back = rev(EDGE.Go)
EDGE.index = c(EDGE.Go,EDGE.Back[-1])
EDGE = Segments[EDGE.index,]
Sequence.Back = rev(Sequence.Go)
Sequence = c(Sequence.Go,Sequence.Back[-1])
return(list(Path = EDGE,edge.index =c(EDGE.Go,EDGE.Back[-1]),Nodes.Go = Nodes[Sequence.Go,1:2],Nodes.Back = Nodes[Sequence.Back,1:2]))
}
GetLength<-function(Edge){
GL<-function(r){
return(distm(r[1:2],r[3:4],fun = distHaversine)[,1]/1000)
}
D = apply(Edge,1,GL)
return(sum(D))
}
Findpath<-function(start,end,Nodes=Nodes,Segments=Segments,stations=stations,type=c("CNG","ELEC"),network,connector){
startCoord<-as.numeric(geocode(start)[2:1])
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-as.numeric(geocode(end)[2:1])
end.Node <- Nearest.Node(Nodes,endCoord)
fuel.stat<-sift.station(startCoord,endCoord,type,network,connector)[2:1]
station.Node<-Nearest.Node(Nodes,fuel.stat)
Path1 <- Shortest(Segments,Nodes,start.Node,station.Node)
Path2 <- Shortest(Segments,Nodes,station.Node,end.Node)
Path <-list(Path=rbind(Path1$Path,Path2$Path),
edge.index=c(Path1$edge.index,Path2$edge.index),
Nodes.Go=rbind(Path1$Nodes.Go,Path2$Nodes.Go),
Nodes.Back=rbind(Path2$Nodes.Back,Path1$Nodes.Back))
#Edge.index = Path$edge.index
#Edge = Path$Path
#colnames(startCoord) = c("Longtitude","Latitude")
#colnames(endCoord) = c("Longtitude","Latitude")
Route.Go = rbind(startCoord,Path$Nodes.Go,endCoord)
Route.Back = rbind(endCoord,Path$Nodes.Back,startCoord)
#EDGE = Segments[Edge.index,]
#Length = GetLength(EDGE)
#Route.Score = sum(1/Edge$Distance)/nrow(Edge)
#,Edge = EDGE ,Length = Length, Score = Route.Score,End.Point = endCoord))
return(list(go=Route.Go,back=Route.Back))
}
Nearest.station<-function(add){
addr<-as.numeric(geocode(add)[2:1])
fileUrl<-"https://developer.nrel.gov/api/alt-fuel-stations/v1/nearest.csv?api_key=Qf1NPRTeyq65qExWvjIVoGmqxyNu6QxYEHgFrZM4&"
fileUrl<-paste0(fileUrl,"latitude=",addr[2],"&longitude=",addr[1])
download.file(fileUrl,'../data/nearbystation.csv','curl')
df<-read.csv("../data/nearbystation.csv",header=TRUE)
return(list(lat=as.numeric(df$Latitude),lng=as.numeric(df$Longitude)))
}
Findpath("Columbia University","time square")
Findpath<-function(start,end,Nodes=Nodes,Segments=Segments,stations=stations,type=c("CNG","ELEC"),network="ChargePoint Network",connector="NEMA520"){
startCoord<-as.numeric(geocode(start)[2:1])
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-as.numeric(geocode(end)[2:1])
end.Node <- Nearest.Node(Nodes,endCoord)
fuel.stat<-sift.station(startCoord,endCoord,type,network,connector)[2:1]
station.Node<-Nearest.Node(Nodes,fuel.stat)
Path1 <- Shortest(Segments,Nodes,start.Node,station.Node)
Path2 <- Shortest(Segments,Nodes,station.Node,end.Node)
Path <-list(Path=rbind(Path1$Path,Path2$Path),
edge.index=c(Path1$edge.index,Path2$edge.index),
Nodes.Go=rbind(Path1$Nodes.Go,Path2$Nodes.Go),
Nodes.Back=rbind(Path2$Nodes.Back,Path1$Nodes.Back))
#Edge.index = Path$edge.index
#Edge = Path$Path
#colnames(startCoord) = c("Longtitude","Latitude")
#colnames(endCoord) = c("Longtitude","Latitude")
Route.Go = rbind(startCoord,Path$Nodes.Go,endCoord)
Route.Back = rbind(endCoord,Path$Nodes.Back,startCoord)
#EDGE = Segments[Edge.index,]
#Length = GetLength(EDGE)
#Route.Score = sum(1/Edge$Distance)/nrow(Edge)
#,Edge = EDGE ,Length = Length, Score = Route.Score,End.Point = endCoord))
return(list(go=Route.Go,back=Route.Back))
}
runApp()
Findpath("Columbia University","time square")
View(Findpath)
View(Nearest.Node)
View(Nearest.station)
View(Nearest.Node)
View(Nearest.Node)
View(Nearest.Node)
Findpath("Columbia University","time square")
Nearest.station("Columbia University")
runApp()
s<-"Columbia University"
e<-"time square"
Findpath(s,e)
runApp()
runApp()
runApp()
shiny::runApp()
