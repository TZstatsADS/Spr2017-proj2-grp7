#   temp_df$Type = substr(temp[i],22,24)
#   ca_vehicle_df <- rbind(ca_vehicle_df, temp_df)
# }
#
### p2 location differences
#
#
#
# names_fuel <- sort(unique(grow_afs$Fuel.Type.Code))
# x <- c(names_fuel,"Total")
# y1 <- unlist(grow_state_condition["CA",3:10])
# y2 <- unlist(grow_state_condition["NY",3:10])
# data <- data.frame(x, y1, y2)
#
# #The default order will be alphabetized unless specified as below:
# data$x <- factor(data$x, levels = data[["x"]])
#
# p <- plot_ly(data, x = ~x, y = ~y1, type = 'bar', name = paste(), marker = list(color = 'rgb(49,130,189)')) %>%
#   add_trace(y = ~y2, name = 'Secondary Product', marker = list(color = 'rgb(204,204,204)')) %>%
#   layout(xaxis = list(title = "", tickangle = -45),
#          yaxis = list(title = ""),
#          margin = list(b = 100),
#          barmode = 'group')
#
# p
#
#
# g <- list(
#   scope = 'usa',
#   projection = list(type = 'albers usa')
# )
#
#
#
# df <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_ebola.csv')
# # restrict from June to September
# df <- subset(df, Month %in% 6:9)
# # ordered factor variable with month abbreviations
# df$abbrev <- ordered(month.abb[df$Month], levels = month.abb[6:9])
# # September totals
# df9 <- subset(df, Month == 9)
# # common plot options
# g <- list(
#   scope = 'africa',
#   showframe = F,
#   showland = T,
#   landcolor = toRGB("grey90")
# )
#
# g1 <- c(
#   g,
#   resolution = 50,
#   showcoastlines = T,
#   countrycolor = toRGB("white"),
#   coastlinecolor = toRGB("white"),
#   projection = list(type = 'Mercator'),
#   list(lonaxis = list(range = c(-15, -5))),
#   list(lataxis = list(range = c(0, 12))),
#   list(domain = list(x = c(0, 1), y = c(0, 1)))
# )
#
# g2 <- c(
#   g,
#   showcountries = F,
#   bgcolor = toRGB("white", alpha = 0),
#   list(domain = list(x = c(0, .6), y = c(0, .6)))
# )
#
# zipcode <- read.csv("../data/zip_codes_states.csv")
# new_df <- melt(df_fuel_state_int)
# new_zipcode$Lat <- tapply(new_df)
#
# p <- new_df %>%
#   plot_geo(
#     locationmode = 'USA-states', sizes = c(1, 1000), color = I("black")
#   ) %>%
#   layout(
#     title = 'Ebola cases reported by month in West Africa 2014<br> Source: <a href="https://data.hdx.rwlabs.org/dataset/rowca-ebola-cases">HDX</a>',
#     geo = g
#   ) %>%
#
#     add_markers(
#     y = ~Lat, x = ~Lon, locations = ~state,
#     size = ~ value, color = ~ variable, text = ~paste(Value, "cases")
#   ) %>%
#   add_trace(
#     data = df_fuel_state_int[,1:7], z = ~df_fuel_state_int[,1:7], locations = ~state,
#     showscale = F, geo = g
#   ) %>%
#   p
#
#
#
#  data.frame(table_grow_afs[,"1971",])
#
#
# data(gapminder, package = "gapminder")
# gg <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
#   geom_point(aes(size = pop, frame = year)) +
#   scale_x_log10()
# ggplotly(gg)
#
# find_info <- function(year, state){
#     Fuel.Type <- names(which.max(table_grow_afs[,as.character(year:(year+3))), state]))
#     Sum.Year <- sum(table_grow_afs[,as.character(year), state])
#     return(c(year, state, Fuel.Type, Sum.Year))
# }
# ma <- t(mapply(find_info,rep(seq(1970,2014,4), each=51),rep(states_total,time = 12)))
# ani_df <- data.frame(Year = as.numeric(ma[,1]), State  = factor(ma[,2]),
#                      Fuel = factor(ma[,3]), Total = as.numeric(ma[,4]),
#                      stringsAsFactors = FALSE)
# ani_df
#
# #
kaicolorset2 <- c("red","blue","orange","brown","black","green")
# p33 <- plot_ly(vehicle_df_final, x = ~Fuel, y = ~Vehicle,text = ~Type,
#                type = 'scatter', mode = 'markers', frame = ~Year,
#              marker = list(size = ~30*(Prop*100)^(1/10), opacity = 0.5,
#                            color = kaicolorset2[vehicle_df_final$Type])) %>%
#   layout(title = 'Gender Gap in Earnings per University',
#          xaxis = list(showgrid = T),
#          yaxis = list(showgrid = T, type="log")) %>%
#   animation_opts(1000, easing = "elastic") %>%
#   animation_button(
#     x = 1, xanchor = "right", y = 0, yanchor = "top"
#   ) %>%
#   animation_slider(
#     currentvalue = list(prefix = "Year ", font = list(color="red"))
#   )
# p33
vehicle_df_final2 <- vehicle_df_final[order(vehicle_df_final$Type),]
rownames(vehicle_df_final2) <- 1:53
vehicle_df_final2 <- rbind(vehicle_df_final2[c(1,12,17,28,32,43),],
vehicle_df_final2)
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Type),]
vehicle_df_final2$Speed <- c(1,(vehicle_df_final2$Vehicle[2:59]-vehicle_df_final2$Vehicle[1:58]) / vehicle_df_final2$Vehicle[1:58])
rownames(vehicle_df_final2) <- 1:59
vehicle_df_final2 <- vehicle_df_final2[-c(1,13,19,31,36,48),]
makeupdata <- matrix(data = c(2004, "E85", 0,0,0,0,
2004, "HY",0,0,0,0,
2005, "E85", 0,0,0,0,
2005, "HY",0,0,0,0,
2006, "E85", 0,0,0,0,
2006, "HY",0,0,0,0,
2007, "E85", 0,0,0,0,
2007, "HY",0,0,0,0,
2008, "E85", 0,0,0,0,
2008, "HY",0,0,0,0,
2009, "E85", 0,0,0,0,
2009, "HY",0,0,0,0,
2010, "HY",0,0,0,0), ncol = 6, byrow = T)
makeupdata <- data.frame(makeupdata)
colnames(makeupdata) <- c("Year","Type","Vehicle","Fuel","Prop","Speed")
vehicle_df_final2 <- rbind(vehicle_df_final2, makeupdata)
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Type),]
vehicle_df_final2 <- vehicle_df_final2[order(vehicle_df_final2$Year),]
vehicle_df_final2$Year <- as.numeric(vehicle_df_final2$Year)
vehicle_df_final2$Vehicle <- as.numeric(vehicle_df_final2$Vehicle)
vehicle_df_final2$Fuel <- as.numeric(vehicle_df_final2$Fuel)
vehicle_df_final2$Speed <- as.numeric(vehicle_df_final2$Speed)
vehicle_df_final2$Prop <- as.numeric(vehicle_df_final2$Prop)
vehicle_df_final2$Type <- factor(vehicle_df_final2$Type)
p34 <- vehicle_df_final2 %>%
plot_ly(x = ~Fuel, y = ~Speed, color = ~Type,
size = ~Prop^(1/3) * 60, colors = kaicolorset2,
type = 'scatter', mode = 'markers', frame = ~Year,
opacity = 0.3,
sizes = 60*(c(min(vehicle_df_final2$Prop), max(vehicle_df_final2$Prop)))^(1/3),
marker = list(symbol = 'circle', sizemode = 'diameter',
line = list(width = 0.5, color = '#FFFFFF')),
text = ~paste(Type, ':<br>', Prop*100, '%')) %>%
layout(title = 'Fuel Stations vs Increasing Speed of Vehicles',
xaxis = list(title = 'Rate of increasing vehicles',
gridcolor = 'rgb(255, 255, 255)',
range = c(0, 5300),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = '# of Fuel Stations',
gridcolor = 'rgb(255, 255, 255)',
zerolinewidth = 1,
ticklen = 5,
gridwith = 2),
paper_bgcolor = 'rgb(243, 243, 243)',
plot_bgcolor = 'rgb(243, 243, 243)'
)%>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "top"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
rownames(vehicle_df_final2) <- 1:nrow(vehicle_df_final2)
fuel_vehicle_add3 <- fuel_vehicle_add[-c(1,2,3,4,27,33)]
regular <- which(vehicle_df_final2$Speed ==0)
regular <- regular[1:(length(regular)-1)]
vehicle_df_final3 <- vehicle_df_final2[-regular,]
reg_df <- data.frame(add_station = fuel_vehicle_add3,
rate_increasing = vehicle_df_final3$Speed,
Type = vehicle_df_final3$Type,
Year = vehicle_df_final3$Year)
reg_df <- reg_df[order(reg_df$rate_increasing),]
p35 <- reg_df %>%
plot_ly(x = ~rate_increasing, y = ~add_station, color = ~Type,
text = ~paste(Year)) %>%
layout(
xaxis = list(title = 'Rate of increasing vehicles',
gridcolor = 'rgb(255, 255, 255)',
range = c(-0.5,0.5),
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2),
yaxis = list(title = 'Stations added in one year(log)',
gridcolor = 'rgb(255, 255, 255)',
type = "log",
zerolinewidth = 1,
ticklen = 5,
gridwidth = 2)
)
# p35
# Years_available <- unique(vehicle_df_final3$Year[selected_rows])
# REG_FUEL_ADD <- as.numeric(table_fuel_year[as.character(Years_available),input$fuel_type_reg])
# REG_VEH_NUM <- vehicle_df_final3$Speed[selected_rows]
#
#
# p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Species)
# p
#
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
#
library(shiny)
library(leaflet)
library(ggmap)
library(ggplot2)
library(RCurl)
library(RJSONIO)
library(igraph)
library(geosphere)
library(data.table)
## Kai's edit
library(dplyr)
library(reshape2)
library(UScensus2010)
library(choroplethr)
library(plotly)
## Kai's edit
source("../lib/findpath.R")
source("../lib/Kai_code.R")
runApp()
library(shiny)
library(leaflet)
library(ggmap)
library(ggplot2)
library(RCurl)
library(RJSONIO)
library(igraph)
library(geosphere)
library(data.table)
## Kai's edit
library(dplyr)
library(reshape2)
library(UScensus2010)
library(choroplethr)
#library(plotly)
## Kai's edit
source("../lib/findpath.R")
source("../lib/Kai_code.R")
library("tibble")
library(tibble)
source("../lib/Kai_code.R")
### Inauguaral speeches
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
packages.used=c("rvest", "tibble", "qdap",
"sentimentr", "gplots", "dplyr",
"tm", "syuzhet", "factoextra",
"beeswarm", "scales", "RColorBrewer",
"RANN", "tm", "topicmodels")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
source("../lib/plotstacked.R")
source("../lib/speechFuncs.R")
### Inauguaral speeches
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
# Get link URLs
# f.speechlinks is a function for extracting links from the list of speeches.
inaug=f.speechlinks(main.page)
#head(inaug)
as.Date(inaug[,1], format="%B %e, %Y")
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
#### Nomination speeches
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
# Get link URLs
nomin <- f.speechlinks(main.page)
#head(nomin)
#
#### Farewell speeches
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
# Get link URLs
farewell <- f.speechlinks(main.page)
#head(farewell)
## 只是简单的数据爬虫，因为写好了函数直接放一个链接就完全趴下来了，而且从日期看，能看出最后一个有问题
inaug.list=read.csv("../data/inauglist.csv", stringsAsFactors = FALSE)
nomin.list=read.csv("../data/nominlist.csv", stringsAsFactors = FALSE)
farewell.list=read.csv("../data/farewelllist.csv", stringsAsFactors = FALSE)
speech.list=rbind(inaug.list, nomin.list, farewell.list)
speech.list$type=c(rep("inaug", nrow(inaug.list)),
rep("nomin", nrow(nomin.list)),
rep("farewell", nrow(farewell.list)))
speech.url=rbind(inaug, nomin, farewell)
speech.list=cbind(speech.list, speech.url)
# Loop over each row in speech.list
speech.list$fulltext=NA
for(i in seq(nrow(speech.list))) {
text <- read_html(speech.list$urls[i]) %>% # load the page
html_nodes(".displaytext") %>% # isloate the text
html_text() # get the text
speech.list$fulltext[i]=text
# Create the file name
filename <- paste0("../data/fulltext/",
speech.list$type[i],
speech.list$File[i], "-",
speech.list$Term[i], ".txt")
sink(file = filename) %>% # open file to write
cat(text)  # write the file
sink() # close the file
}
speech1=paste(readLines("../data/fulltext/SpeechDonaldTrump-NA.txt", n=-1, skipNul=TRUE),
collapse=" ")
speech2=paste(readLines("../data/fulltext/SpeechDonaldTrump-NA2.txt",
n=-1, skipNul=TRUE),
collapse=" ")
speech3=paste(readLines("../data/fulltext/PressDonaldTrump-NA.txt",
n=-1, skipNul=TRUE),
collapse=" ")
Trump.speeches=data.frame(
President=rep("Donald J. Trump", 3),
File=rep("DonaldJTrump", 3),
Term=rep(0, 3),
Party=rep("Republican", 3),
Date=c("August 31, 2016", "September 7, 2016", "January 11, 2017"),
Words=c(word_count(speech1), word_count(speech2), word_count(speech3)),
Win=rep("yes", 3),
type=rep("speeches", 3),
links=rep(NA, 3),
urls=rep(NA, 3),
fulltext=c(speech1, speech2, speech3)
)
speech.list=rbind(speech.list, Trump.speeches)
### Inauguaral speeches
main.page <- read_html(x = "http://www.presidency.ucsb.edu/inaugurals.php")
# Get link URLs
# f.speechlinks is a function for extracting links from the list of speeches.
inaug=f.speechlinks(main.page)
#head(inaug)
as.Date(inaug[,1], format="%B %e, %Y")
inaug=inaug[-nrow(inaug),] # remove the last line, irrelevant due to error.
#### Nomination speeches
main.page=read_html("http://www.presidency.ucsb.edu/nomination.php")
# Get link URLs
nomin <- f.speechlinks(main.page)
#head(nomin)
#
#### Farewell speeches
main.page=read_html("http://www.presidency.ucsb.edu/farewell_addresses.php")
# Get link URLs
farewell <- f.speechlinks(main.page)
#head(farewell)
## 只是简单的数据爬虫，因为写好了函数直接放一个链接就完全趴下来了，而且从日期看，能看出最后一个有问题
speech1=paste(readLines("../data/fulltext/SpeechDonaldTrump-NA.txt", n=-1, skipNul=TRUE),
collapse=" ")
speech2=paste(readLines("../data/fulltext/SpeechDonaldTrump-NA2.txt",
n=-1, skipNul=TRUE),
collapse=" ")
speech3=paste(readLines("../data/fulltext/PressDonaldTrump-NA.txt",
n=-1, skipNul=TRUE),
collapse=" ")
Trump.speeches=data.frame(
President=rep("Donald J. Trump", 3),
File=rep("DonaldJTrump", 3),
Term=rep(0, 3),
Party=rep("Republican", 3),
Date=c("August 31, 2016", "September 7, 2016", "January 11, 2017"),
Words=c(word_count(speech1), word_count(speech2), word_count(speech3)),
Win=rep("yes", 3),
type=rep("speeches", 3),
links=rep(NA, 3),
urls=rep(NA, 3),
fulltext=c(speech1, speech2, speech3)
)
speech.list=rbind(speech.list, Trump.speeches)
sentence.list=NULL
for(i in 1:nrow(speech.list)){
sentences=sent_detect(speech.list$fulltext[i],
endmarks = c("?", ".", "!", "|",";"))
if(length(sentences)>0){
emotions=get_nrc_sentiment(sentences)
word.count=word_count(sentences)
# colnames(emotions)=paste0("emo.", colnames(emotions))
# in case the word counts are zeros?
emotions=diag(1/(word.count+0.01))%*%as.matrix(emotions) #平均每个字
sentence.list=rbind(sentence.list,
cbind(speech.list[i,-ncol(speech.list)],
sentences=as.character(sentences),
word.count,
emotions,
sent.id=1:length(sentences)
)
# 加到原来的那个上面，保留句子，情绪，字数，句子编号
)
}
}
str(speech.list)
sentence.list=
sentence.list%>%
filter(!is.na(word.count))
sel.comparison=c("DonaldJTrump","JohnMcCain", "GeorgeBush", "MittRomney", "GeorgeWBush",
"RonaldReagan","AlbertGore,Jr", "HillaryClinton","JohnFKerry",
"WilliamJClinton","HarrySTruman", "BarackObama", "LyndonBJohnson",
"GeraldRFord", "JimmyCarter", "DwightDEisenhower", "FranklinDRoosevelt",
"HerbertHoover","JohnFKennedy","RichardNixon","WoodrowWilson",
"AbrahamLincoln", "TheodoreRoosevelt", "JamesGarfield",
"JohnQuincyAdams", "UlyssesSGrant", "ThomasJefferson",
"GeorgeWashington", "WilliamHowardTaft", "AndrewJackson",
"WilliamHenryHarrison", "JohnAdams")
par(mar=c(4, 11, 2, 2))
#sel.comparison=levels(sentence.list$FileOrdered)
sentence.list.sel=filter(sentence.list,
type=="nomin", Term==1, File%in%sel.comparison)
sentence.list.sel$File=factor(sentence.list.sel$File)
sentence.list.sel$FileOrdered=reorder(sentence.list.sel$File,
sentence.list.sel$word.count,
mean,
order=T) #根据order来排序
beeswarm(word.count~FileOrdered,
data=sentence.list.sel,
horizontal = TRUE,
pch=16, col=alpha(brewer.pal(9, "Set1"), 0.6),
cex=0.55, cex.axis=0.8, cex.lab=0.8,
spacing=5/nlevels(sentence.list.sel$FileOrdered),
las=2, xlab="Number of words in a sentence.", ylab="",
main="Nomination speeches")
par(mar=c(4, 11, 2, 2))
#sel.comparison=levels(sentence.list$FileOrdered)
sentence.list.sel=filter(sentence.list,
type=="nomin", Term==2, File%in%sel.comparison)
sentence.list.sel$File=factor(sentence.list.sel$File)
sentence.list.sel$FileOrdered=reorder(sentence.list.sel$File,
sentence.list.sel$word.count,
mean,
order=T)
beeswarm(word.count~FileOrdered,
data=sentence.list.sel,
horizontal = TRUE,
pch=16, col=alpha(brewer.pal(9, "Set1"), 0.6),
cex=0.55, cex.axis=0.8, cex.lab=0.8,
spacing=1.2/nlevels(sentence.list.sel$FileOrdered),
las=2, xlab="Number of words in a sentence.", ylab="",
main="Nomination speeches, 2nd term")
?select()
sentence.list%>%
filter(File=="DonaldJTrump",
type=="nomin",
word.count<=3)%>%
select(sentences)
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
library(plotly)
source("../lib/Kai_code.R")
plot_ly
