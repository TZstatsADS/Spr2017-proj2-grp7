marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
class(p33)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers'
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers',
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = Year,
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = 1:21)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000),
Col = rep(c("Green","Red"),10)
)
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000),
Col = c(rep(c("Green","Red"),10),"Red")
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = Col)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
df_fake <- data.frame(Year = 1995:2015,
Prop = runif(21)*40,
Vehicle = rnorm(21,10000,2000),
Station = rnorm(21,10000,2000),
Col = c(rep(c("Green","Red"),10),"Red")
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = Col)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33 <- plot_ly(df_fake, x = ~Station, y = ~Vehicle, text = ~Year,
type = 'scatter', mode = 'markers', frame = ~Year,
marker = list(size = ~Prop, opacity = 0.5,
color = ~Col)) %>%
layout(title = 'Gender Gap in Earnings per University',
xaxis = list(showgrid = T),
yaxis = list(showgrid = T)) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
p33
shiny::runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
runApp('Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai')
# load packages
library("rvest")
library("tibble")
library("qdap")
library("sentimentr")
library("gplots")
library("dplyr")
library("tm")
library("syuzhet")
library("factoextra")
library("beeswarm")
library("scales")
library("RColorBrewer")
library("RANN")
library("tm")
library("topicmodels")
library(plotly)
library(tibble)
source("../lib/Kai_code.R")
setwd("~/Desktop/ADS/project2/Spr2017-proj2-grp7/app_kai")
path_alt_fuel_station <- "../data/alt_fuel_stations (Feb 12 2017).csv"
alt_fuel_station <- read.csv(path_alt_fuel_station,
stringsAsFactors = F,
header = T)
nrow(alt_fuel_station)
grow_afs <-
tbl_df(alt_fuel_station)  %>%
select(Fuel.Type.Code, Expected.Date, Open.Date, State) %>%
filter((nchar(Expected.Date)!=0)|(nchar(Open.Date)!=0))  %>%
mutate(Start.Date = as.Date(ifelse(nchar(Expected.Date)!=0,
Expected.Date,
Open.Date))) %>%
mutate(Start.Year = format(Start.Date, '%Y')) %>%
mutate(Start.Month = format(Start.Date, '%m')) %>%
select(Fuel.Type.Code, Start.Year, State)
shiny::runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
source("fakedata.R")
z <- c(1,1,1)
n =10
Sdata <- fakedata(z,n)
classify <- function(S,z){
result <- ifelse(S %*% z> 0 , 1, -1)
return(result)
}
classify(Sdata$S,z)
Cost_function <- function(S,y,z){
sum((classify(S,z) != y) * abs(S %*% z))
}
Cost_dev_function <- function(S,y,z){
colSums(as.numeric(classify(S,z) != y) * (-y) * S)
}
perceptrain <- function(S,y){
z <- c(runif(ncol(S)-1),1)
z <- c(1,-1,1)
Z_history <- z
dc <- Cost_dev_function(S,y,z)
k <- 1
while(Cost_function(S,y,z) != 0){
dc <- Cost_dev_function(S,y,z)
z <- z - (1/k) * dc
Z_history <- rbind(Z_history, z)
k <- k + 1
}
return(list(z=z, Z_history = Z_history))
}
#  perceptrain(Sdata$S,Sdata$y)
z <- rnorm(3)
Sdata2 <- fakedata(z,100)
z_train <- perceptrain(Sdata2$S, Sdata2$y)
Sdata3 <- fakedata(z,100)
correct_rate <- sum(classify(Sdata3$S,z_train$z) == Sdata3$y) /100
correct_rate
#  z_train
test_data <- Sdata3$S[,1:2]
plot(test_data, col = factor(Sdata3$y), main = "Test Data",
xlab = "", ylab = "")
slope <- - z_train$z[1] / z_train$z[2]
intercept <- - z_train$z[3] / z_train$z[2]
abline(intercept, slope)
z_train
slope.t <- - z_train$Z_history[,1] / z_train$Z_history[,2]
intercept.t <- - z_train$Z_history[3] / z_train$Z_history[2]
intercept.t
slope.t <- - z_train$Z_history[,1] / z_train$Z_history[,2]
intercept.t <- - z_train$Z_history[,3] / z_train$Z_history[,2]
slope.t
train_data <- Sdata2$S[,1:2]
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept.t,slope.t)
abline(intercept.t[1],slope.t[1])
intercept.t
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
abline(intercept.t[1],slope.t[1])
intercept.t[1]
slope.t[1]
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
abline(intercept.t[1],slope.t[1])
train_data <- Sdata2$S[,1:2]
z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
abline(intercept.t[1],slope.t[1])
train_data <- Sdata2$S[,1:2]
z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope)
abline(intercept.t,slope.t)
abline(intercept[2].t,slope.t[2])
abline(intercept[2].t,slope.t[2])
abline(intercept[2].t,slope.t[2])
abline(intercept.t[2],slope.t[2])
plot(1,1)
abline(c(1,2),c(1,1))
plot(-1:1,-1:1)
abline(c(1,2),c(1,1))
abline(c(2,1),c(1,1))
train_data <- Sdata2$S[,1:2]
z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope, "green")
for (i in 1:(length(z_train$z)-1)) {abline(intercept.t[i],slope.t[i])}
train_data <- Sdata2$S[,1:2]
#z_train$Z_history
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
plot(train_data, col = factor(Sdata2$y), main = "Train Data",
xlab = "", ylab = "")
abline(intercept, slope, "green")
for (i in 1:(length(z_train$z)-1)) {abline(intercept.t[i],slope.t[i])}
slope.t <- as.numeric(- z_train$Z_history[,1] / z_train$Z_history[,2])
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
slope.t
intercept.t <- as.numeric(- z_train$Z_history[,3] / z_train$Z_history[,2])
intercept.t
(length(z_train$z)-1)
z_train$z
(nrow(z_train$Z_history)-1)
=======
base <- df_fake %>%
plot_ly(x = ~Station, y = ~Vehicle, size = ~(Prop),
hoverinfo = "text", trace = Year) %>%
layout() %>%
add_markers(color = ~Fuel, frame = ~Year, ids = ~State) %>%
animation_opts(1000, easing = "elastic") %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "Year ", font = list(color="red"))
)
source('~/Documents/graduate/applied data science/Spr2017-proj2-grp7/lib/Kai_code.R')
>>>>>>> origin/master
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
detach("package:graphics", unload=TRUE)
library("acs", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("choroplethrCalifornia")
shiny::runApp('~/Downloads/Spr2017-proj2-grp7/app_kai')
detach("package:graphics", unload=TRUE)
library("graphics", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
runApp('~/Downloads/Spr2017-proj2-grp7/app_kai')
runApp('~/Downloads/Spr2017-proj2-grp7/app_kai')
shiny::runApp()
shiny::runApp()
runApp()
geocode("Columbia university")
add<-"Columbia University"
addr<-as.numeric(geocode(add)[2:1])
fileUrl<-"https://developer.nrel.gov/api/alt-fuel-stations/v1/nearest.csv?api_key=Qf1NPRTeyq65qExWvjIVoGmqxyNu6QxYEHgFrZM4&"
fileUrl<-paste0(fileUrl,"latitude=",addr[2],"&longitude=",addr[1])
download.file(fileUrl,'./route.csv','curl')
getwd()
addr<-as.numeric(geocode(add)[2:1])
fileUrl<-"https://developer.nrel.gov/api/alt-fuel-stations/v1/nearest.csv?api_key=Qf1NPRTeyq65qExWvjIVoGmqxyNu6QxYEHgFrZM4&"
fileUrl<-paste0(fileUrl,"latitude=",addr[2],"&longitude=",addr[1])
download.file(fileUrl,'../data/nearbystation.csv','curl')
df<-read.table("../data/nearbystation.csv",header=TRUE)
df<-read.csv("../data/nearbystation.csv",header=TRUE)
View(df)
station<-data.frame(lat,lng)
station<-data.frame(lat=NULL,lng=NULL)
station
View(stations)
sift.station<-function(scoord,ecoord,type,network,connector){
station.o<-data.frame(lat=as.numeric(stations$Latitude),
lng=as.numeric(stations$Longitude),
t=stations$Fuel.Type.Code
net=stations$EV.Network,
con=stations$EV.Connector.Types)
station<-data.frame(lat=NULL,lng=NULL,t=NULL,net=NULL,con=NULL)
m<-length(type)
for (i in 1:m){
if (type[m]!="ELEC")
station<-rbind(station,station.o[station.o$t==type[m],])
else {
station<-rbind(station,station.o[station.o$t==type[m]&station.o$net==network&station.o$con==connector,])
}
}
x<-ecoord-scoord
station.dir<-data.frame(lat=(station$lat-scoord[2]),lng=(station$lng-scoord[1]))
station.l<-station.dir$lat^2+station.dir$lng^2
l<-station.dir$lat*x[2]+station.dir$lng*x[1]
l<-l/station.l
i1<-which.max(l)
i2<-which.max(l[-i1])
return(c(station$lat[i1],station$lng[i1],station$lat[i2],station$lng[i2]))
}
Shortest<-function(New.Segments,U.Nodes,Start.ID,End.ID){
float <- 0.01
Start <- U.Nodes[Start.ID,]
End <- U.Nodes[End.ID,]
Segments <- New.Segments
Segments$Distance<-rep(1,nrow(Segments))
df <- as.data.frame(Segments[c("Start","End","Distance")])
names(df) <- c("start_node","end_node","dist")
gdf <- graph.data.frame(df, directed=FALSE)
SHORT.Go = shortest_paths(gdf,as.character(Start.ID),as.character(End.ID),weights = E(gdf)$dist)$vpath
EDGE.Go = as.numeric(shortest_paths(gdf,as.character(Start.ID),as.character(End.ID),output = "epath",weights = E(gdf)$dist)$epath[[1]])
names<-V(gdf)$name
Sequence.Go =as.numeric(lapply(SHORT.Go,function(x){names[x]})[[1]])
EDGE.Back = rev(EDGE.Go)
EDGE.index = c(EDGE.Go,EDGE.Back[-1])
EDGE = Segments[EDGE.index,]
Sequence.Back = rev(Sequence.Go)
Sequence = c(Sequence.Go,Sequence.Back[-1])
return(list(Path = EDGE,edge.index =c(EDGE.Go,EDGE.Back[-1]),Nodes.Go = Nodes[Sequence.Go,1:2],Nodes.Back = Nodes[Sequence.Back,1:2]))
}
GetLength<-function(Edge){
GL<-function(r){
return(distm(r[1:2],r[3:4],fun = distHaversine)[,1]/1000)
}
D = apply(Edge,1,GL)
return(sum(D))
}
Findpath<-function(start,end,Nodes=Nodes,Segments=Segments,stations=stations,type=c("CNG","ELEC"),network,connector){
startCoord<-as.numeric(geocode(start)[2:1])
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-as.numeric(geocode(end)[2:1])
end.Node <- Nearest.Node(Nodes,endCoord)
fuel.stat<-sift.station(startCoord,endCoord,type,network,connector)[2:1]
station.Node<-Nearest.Node(Nodes,fuel.stat)
Path1 <- Shortest(Segments,Nodes,start.Node,station.Node)
Path2 <- Shortest(Segments,Nodes,station.Node,end.Node)
Path <-list(Path=rbind(Path1$Path,Path2$Path),
edge.index=c(Path1$edge.index,Path2$edge.index),
Nodes.Go=rbind(Path1$Nodes.Go,Path2$Nodes.Go),
Nodes.Back=rbind(Path2$Nodes.Back,Path1$Nodes.Back))
#Edge.index = Path$edge.index
#Edge = Path$Path
#colnames(startCoord) = c("Longtitude","Latitude")
#colnames(endCoord) = c("Longtitude","Latitude")
Route.Go = rbind(startCoord,Path$Nodes.Go,endCoord)
Route.Back = rbind(endCoord,Path$Nodes.Back,startCoord)
#EDGE = Segments[Edge.index,]
#Length = GetLength(EDGE)
#Route.Score = sum(1/Edge$Distance)/nrow(Edge)
#,Edge = EDGE ,Length = Length, Score = Route.Score,End.Point = endCoord))
return(list(go=Route.Go,back=Route.Back))
}
Nearest.station<-function(add){
addr<-as.numeric(geocode(add)[2:1])
fileUrl<-"https://developer.nrel.gov/api/alt-fuel-stations/v1/nearest.csv?api_key=Qf1NPRTeyq65qExWvjIVoGmqxyNu6QxYEHgFrZM4&"
fileUrl<-paste0(fileUrl,"latitude=",addr[2],"&longitude=",addr[1])
download.file(fileUrl,'../data/nearbystation.csv','curl')
df<-read.csv("../data/nearbystation.csv",header=TRUE)
return(list(lat=as.numeric(df$Latitude),lng=as.numeric(df$Longitude)))
}
Findpath("Columbia University","time square")
Findpath<-function(start,end,Nodes=Nodes,Segments=Segments,stations=stations,type=c("CNG","ELEC"),network="ChargePoint Network",connector="NEMA520"){
startCoord<-as.numeric(geocode(start)[2:1])
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-as.numeric(geocode(end)[2:1])
end.Node <- Nearest.Node(Nodes,endCoord)
fuel.stat<-sift.station(startCoord,endCoord,type,network,connector)[2:1]
station.Node<-Nearest.Node(Nodes,fuel.stat)
Path1 <- Shortest(Segments,Nodes,start.Node,station.Node)
Path2 <- Shortest(Segments,Nodes,station.Node,end.Node)
Path <-list(Path=rbind(Path1$Path,Path2$Path),
edge.index=c(Path1$edge.index,Path2$edge.index),
Nodes.Go=rbind(Path1$Nodes.Go,Path2$Nodes.Go),
Nodes.Back=rbind(Path2$Nodes.Back,Path1$Nodes.Back))
#Edge.index = Path$edge.index
#Edge = Path$Path
#colnames(startCoord) = c("Longtitude","Latitude")
#colnames(endCoord) = c("Longtitude","Latitude")
Route.Go = rbind(startCoord,Path$Nodes.Go,endCoord)
Route.Back = rbind(endCoord,Path$Nodes.Back,startCoord)
#EDGE = Segments[Edge.index,]
#Length = GetLength(EDGE)
#Route.Score = sum(1/Edge$Distance)/nrow(Edge)
#,Edge = EDGE ,Length = Length, Score = Route.Score,End.Point = endCoord))
return(list(go=Route.Go,back=Route.Back))
}
runApp()
Findpath("Columbia University","time square")
View(Findpath)
View(Nearest.Node)
View(Nearest.station)
View(Nearest.Node)
View(Nearest.Node)
View(Nearest.Node)
Findpath("Columbia University","time square")
Nearest.station("Columbia University")
runApp()
s<-"Columbia University"
e<-"time square"
Findpath(s,e)
runApp()
runApp()
runApp()
