shiny::runApp()
?Find.Path
View(Find.Path)
runApp()
View(Nodes)
View(Segments)
View(Original.Segments)
View(Find.Path)
View(Nodes)
?fread
View(Nearest.ID)
?distm
View(Segments)
View(Segments)
load("/Users/liyaqin/Downloads/Fall2016-Proj2-grp10-master/data/Original Segments.RData")
View(Original.Segments)
View(Segments)
View(Nodes)
View(Nodes)
View(Segments)
library(RCurl)
library(RJSONIO)
geoCode<-function(add){
root<-"https://maps.google.com/maps/api/geocode/"
url<-paste0(root,"json?address=",add,"&key=AIzaSyC82ht4goSYy9M7Dp9tXc-vO9qxCoeF0jM")
u<-getURL(URLencode(url))
u<-fromJSON(u,simplify=FALSE)
if (u$status=="OK"){
lat<-as.numeric(u$results[[1]]$geometry$location$lat)
lng<-as.numeric(u$results[[1]]$geometry$location$lng)
location_type<-u$results[[1]]$geometry$location_type
formatted_address<-u$results[[1]]$formatted_address
return(c(lat,lng,location_type,formatted_address))
} else {
return(rep(NA,4))
}
}
geoCode("Columbia University")
load("./Nodes.RData")
load("./Segments.RData")
load("./Original.Segments.RData")
getwd()
library(RCurl)
library(RJSONIO)
library(leaflet)
library(igraph)
load("./Nodes.RData")
load("./Segments.RData")
load("./Original Segments.RData")
stations<-read.csv("./data.csv",header=TRUE)
getwd()
setwd("/Users/liyaqin/Documents/graduate/applied data science/Spr2017-proj2-grp7/liyaqin/)
+
_)
l
,,;
;lk;j;j
setwd("/Users/liyaqin/Documents/graduate/applied data science/Spr2017-proj2-grp7/liyaqin
)
""
"
setwd("/Users/liyaqin/Documents/graduate/applied data science/Spr2017-proj2-grp7/liyaqin")
getwd
getwd()
library(RCurl)
library(RJSONIO)
library(leaflet)
library(igraph)
load("./Nodes.RData")
load("./Nodes.RData")
load("./Segments.RData")
load("./Original Segments.RData")
stations<-read.csv("./data.csv",header=TRUE)
geoCode<-function(add){
root<-"https://maps.google.com/maps/api/geocode/"
url<-paste0(root,"json?address=",add,"&key=AIzaSyC82ht4goSYy9M7Dp9tXc-vO9qxCoeF0jM")
u<-getURL(URLencode(url))
u<-fromJSON(u,simplify=FALSE)
if (u$status=="OK"){
lat<-as.numeric(u$results[[1]]$geometry$location$lat)
lng<-as.numeric(u$results[[1]]$geometry$location$lng)
location_type<-u$results[[1]]$geometry$location_type
formatted_address<-u$results[[1]]$formatted_address
return(c(lat,lng,location_type,formatted_address))
} else {
return(rep(NA,4))
}
}
Nearest.Node<-function(Nodes,Coord){
library(geosphere)
D = distm(Nodes[,1:2],Coord,fun =distHaversine)[,1]
return(Nodes[which.min(D),"ID"])
}
sift.station<-function(scoord,ecoord){
station<-stations
x<-ecoord-scoord
station.dir<-data.frame(lat=station$Latitude-scoord[1],lng=station$Longitude-scoord[2])
station.l<-station.dir$lat^2+station.dir$lng^2
l<-station.dir%*%scoord/station.l
i1<-which.min(l)
i2<-which.min(l[-i1])
return(c(station$Latitude[i1],station$Longitude[i1],station$Latitude[i2],station$Longitude[i2]))
}
Shortest<-function(New.Segments,U.Nodes,Start.ID,End.ID){
float <- 0.01
Start <- U.Nodes[Start.ID,]
End <- U.Nodes[End.ID,]
Segments <- New.Segments
Segments$Distance<-rep(1,nrow(Segments))
df <- as.data.frame(Segments[c("Start","End","Distance")])
names(df) <- c("start_node","end_node","dist")
gdf <- graph.data.frame(df, directed=FALSE)
SHORT.Go = shortest_paths(gdf,as.character(Start.ID),as.character(End.ID),weights = E(gdf)$dist)$vpath
EDGE.Go = as.numeric(shortest_paths(gdf,as.character(Start.ID),as.character(End.ID),output = "epath",weights = E(gdf)$dist)$epath[[1]])
names<-V(gdf)$name
Sequence.Go =as.numeric(lapply(SHORT.Go,function(x){names[x]})[[1]])
EDGE.Back = rev(EDGE.Go)
EDGE.index = c(EDGE.Go,EDGE.Back[-1])
EDGE = Segments[EDGE.index,]
Sequence.Back = rev(Sequence.Go)
Sequence = c(Sequence.Go,Sequence.Back[-1])
return(list(Path = EDGE,edge.index =c(EDGE.Go,EDGE.Back[-1]),Nodes.Go = Nodes[Sequence.Go,1:2],Nodes.Back = Nodes[Sequence.Back,1:2]))
}
GetLength<-function(Edge){
GL<-function(r){
return(distm(r[1:2],r[3:4],fun = distHaversine)[,1]/1000)
}
D = apply(Edge,1,GL)
return(sum(D))
}
Findpath<-function(start,end,Nodes,Segments,stations){
startCoord<-geocode(start)[1:2]
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-geocode(end)[1:2]
end.Node <- Nearest.Node(Nodes,endCoord)
fuel.stat<-sift.station(startCoord,endCoord)[1:2]
station.Node<-Nearest.Node(Nodes,fuel.stat)
Path1 <- Shortest(Segments,Nodes,start.Node,station.Node)
Path2 <- Shortest(Segments,Nodes,station.Node,end.Node)
Path <-list(Path=rbind(Path1$Path,Path2$Path),
edge.index=c(Path1$edge.index,Path2$edge.index),
Nodes.Go=rbind(Path1$Nodes.Go,Path2$Nodes.GO),
Nodes.Back=rbind(Path2$Nodes.Back,Path1$Nodes.Back))
Edge.index = Path$edge.index
Edge = Path$Path
colnames(startCoord) = c("Longtitude","Latitude")
colnames(endCoord) = c("Longtitude","Latitude")
Route.Go = rbind(startCoord,Path$Nodes.Go,endCoord)
Route.Back = rbind(endCoord,Path$Nodes.Back,startCoord)
EDGE = Segments[Edge.index,]
Length = GetLength(EDGE)
Route.Score = sum(1/Edge$Distance)/nrow(Edge)
return(list(Intersection.Go = Route.Go, Intersection.Back = Route.Back,Edge = EDGE ,Length = Length, Score = Route.Score,End.Point = endCoord))
}
start<-"Columbia University"
end<-"Time square"
startCoord<-geocode(start)[1:2]
start.Node<- Nearest.Node(Nodes,startCoord)
startCoord<-as.numeric(geocode(start)[1:2])
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-as.numeric(geocode(end)[1:2])
geocode<-function(add){
root<-"https://maps.google.com/maps/api/geocode/"
url<-paste0(root,"json?address=",add,"&key=AIzaSyC82ht4goSYy9M7Dp9tXc-vO9qxCoeF0jM")
u<-getURL(URLencode(url))
u<-fromJSON(u,simplify=FALSE)
if (u$status=="OK"){
lat<-as.numeric(u$results[[1]]$geometry$location$lat)
lng<-as.numeric(u$results[[1]]$geometry$location$lng)
location_type<-u$results[[1]]$geometry$location_type
formatted_address<-u$results[[1]]$formatted_address
return(c(lat,lng,location_type,formatted_address))
} else {
return(rep(NA,4))
}
}
startCoord<-as.numeric(geocode(start)[1:2])
start.Node<- Nearest.Node(Nodes,startCoord)
startCoord<-as.numeric(geocode(start)[1:2])
geocode<-function(add){
root<-"https://maps.google.com/maps/api/geocode/"
url<-paste0(root,"json?address=",add,"&key=AIzaSyC82ht4goSYy9M7Dp9tXc-vO9qxCoeF0jM")
u<-getURL(URLencode(url))
u<-fromJSON(u,simplify=FALSE)
if (u$status=="OK"){
lat<-as.numeric(u$results[[1]]$geometry$location$lat)
lng<-as.numeric(u$results[[1]]$geometry$location$lng)
location_type<-u$results[[1]]$geometry$location_type
formatted_address<-u$results[[1]]$formatted_address
return(c(lat,lng,location_type,formatted_address))
} else {
return(rep(NA,4))
}
}
startCoord<-as.numeric(geocode(start)[1:2])
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-as.numeric(geocode(end)[1:2])
end.Node <- Nearest.Node(Nodes,endCoord)
View(Nodes)
View(stations)
sift.station<-function(scoord,ecoord){
station<-data.frame(lat=as.numeric(stations$Latitude),
lng=as.numeric(stations$Longitude))
x<-ecoord-scoord
station.dir<-data.frame(lat=station$Latitude-scoord[1],lng=station$Longitude-scoord[2])
station.l<-station.dir$lat^2+station.dir$lng^2
l<-station.dir%*%scoord
l<-l/station.l
i1<-which.min(l)
i2<-which.min(l[-i1])
return(c(station$Latitude[i1],station$Longitude[i1],station$Latitude[i2],station$Longitude[i2]))
}
fuel.stat<-sift.station(startCoord,endCoord)[1:2]
sift.station<-function(scoord,ecoord){
station<-data.frame(lat=as.numeric(stations$Latitude),
lng=as.numeric(stations$Longitude))
x<-ecoord-scoord
station.dir<-data.frame(lat=station$Latitude-scoord[1],lng=station$Longitude-scoord[2])
station.l<-station.dir$lat^2+station.dir$lng^2
l<-station.dir$lat*scoord[1]+station.dir$lng*scoord[2]
l<-l/station.l
i1<-which.min(l)
i2<-which.min(l[-i1])
return(c(station$Latitude[i1],station$Longitude[i1],station$Latitude[i2],station$Longitude[i2]))
}
fuel.stat<-sift.station(startCoord,endCoord)[1:2]
Findpath<-function(start,end,Nodes=Nodes,Segments=Segments,stations=stations){
startCoord<-as.numeric(geocode(start)[1:2])
start.Node<- Nearest.Node(Nodes,startCoord)
endCoord<-as.numeric(geocode(end)[1:2])
end.Node <- Nearest.Node(Nodes,endCoord)
fuel.stat<-sift.station(startCoord,endCoord)[1:2]
station.Node<-Nearest.Node(Nodes,fuel.stat)
Path1 <- Shortest(Segments,Nodes,start.Node,station.Node)
Path2 <- Shortest(Segments,Nodes,station.Node,end.Node)
Path <-list(Path=rbind(Path1$Path,Path2$Path),
edge.index=c(Path1$edge.index,Path2$edge.index),
Nodes.Go=rbind(Path1$Nodes.Go,Path2$Nodes.GO),
Nodes.Back=rbind(Path2$Nodes.Back,Path1$Nodes.Back))
Edge.index = Path$edge.index
Edge = Path$Path
colnames(startCoord) = c("Longtitude","Latitude")
colnames(endCoord) = c("Longtitude","Latitude")
Route.Go = rbind(startCoord,Path$Nodes.Go,endCoord)
Route.Back = rbind(endCoord,Path$Nodes.Back,startCoord)
EDGE = Segments[Edge.index,]
Length = GetLength(EDGE)
Route.Score = sum(1/Edge$Distance)/nrow(Edge)
return(list(Intersection.Go = Route.Go, Intersection.Back = Route.Back,Edge = EDGE ,Length = Length, Score = Route.Score,End.Point = endCoord))
}
Findpath(start,end)
station<-data.frame(lat=as.numeric(stations$Latitude),
lng=as.numeric(stations$Longitude))
View(station)
ecoord<-startCoord
ecoord<-endCoord
scoord<-startCoord
x<-ecoord-scoord
station.dir<-data.frame(lat=station$Latitude-scoord[1],lng=station$Longitude-scoord[2])
])
station.dir<-data.frame(lat=(station$Latitude-scoord[1]),lng=(station$Longitude-scoord[2]))
station.dir<-data.frame(lat=(station$lat-scoord[1]),lng=(station$lng-scoord[2]))
station.l<-station.dir$lat^2+station.dir$lng^2
View(station.dir)
l<-station.dir$lat*scoord[1]+station.dir$lng*scoord[2]
l<-station.dir$lat*x[1]+station.dir$lng*x[2]
l<-l/station.l
i1<-which.min(l)
i2<-which.min(l[-i1])
fuel.stat<-sift.station(startCoord,endCoord)[1:2]
fuel.stat<-sift.station(startCoord,endCoord)[1:2]
sift.station<-function(scoord,ecoord){
station<-data.frame(lat=as.numeric(stations$Latitude),
lng=as.numeric(stations$Longitude))
x<-ecoord-scoord
station.dir<-data.frame(lat=(station$lat-scoord[1]),lng=(station$lng-scoord[2]))
station.l<-station.dir$lat^2+station.dir$lng^2
l<-station.dir$lat*x[1]+station.dir$lng*x[2]
l<-l/station.l
i1<-which.min(l)
i2<-which.min(l[-i1])
return(c(station$lat[i1],station$lng[i1],station$lat[i2],station$lng[i2]))
}
fuel.stat<-sift.station(startCoord,endCoord)[1:2]
station.Node<-Nearest.Node(Nodes,fuel.stat)
Path1 <- Shortest(Segments,Nodes,start.Node,station.Node)
Path2 <- Shortest(Segments,Nodes,station.Node,end.Node)
Path <-list(Path=rbind(Path1$Path,Path2$Path),
edge.index=c(Path1$edge.index,Path2$edge.index),
Nodes.Go=rbind(Path1$Nodes.Go,Path2$Nodes.GO),
Nodes.Back=rbind(Path2$Nodes.Back,Path1$Nodes.Back))
Edge.index = Path$edge.index
Edge = Path$Path
colnames(startCoord) = c("Longtitude","Latitude")
colnames(endCoord) = c("Longtitude","Latitude")
Route.Go = rbind(startCoord,Path$Nodes.Go,endCoord)
Route.Back = rbind(endCoord,Path$Nodes.Back,startCoord)
EDGE = Segments[Edge.index,]
colnames(t(startCoord)) = c("Longtitude","Latitude")
